{
  "hash": "2bbf721d7b0aa5356856b3f360c75b9f",
  "result": {
    "markdown": "---\ntitle: Merging and Summarizing Data\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## Merging Data Frames\n\n- Often we have data from two different sources\n- Results in two data frames\n- How to make them one so we can analyze? \n- Key questions\n  - What is the unit of analysis? \n  - What is/are the corresponding identifier variables?\n  - Are the identifier variables in common? \n  - Or do they have to be added/transformed to match?\n  \n## Merging WB and V-Dem Data\n\n- These are both time-series, country-level data\n- Need to merge by country-year\n- Year is easy\n- But there are many different country codes\n- Can use `countrycode` package to assign country codes\n\n## `countrycode` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load countrycode\nlibrary(countrycode)\n\n# Create new iso3c variable\ndemocracy <- democracy |>    \n  mutate(iso3c = countrycode(sourcevar = vdem_ctry_id, # what we are converting\n        origin = \"vdem\",         # we are converting from vdem\n        destination = \"wb\"))  |> # and converting to the WB iso3c code \n  relocate(iso3c, .after = vdem_ctry_id) # move iso3c \n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## Try it Yourself\n\n- Using your democracy data frame from the last lesson\n- Use `mutate()` and `countrycode()` to add iso3c country codes\n- Use `relocate` to move your iso3c code to the \"front\" of your data frame (optional)\n\n## Types of Joins in `dplyr`\n\n- Mutating versus filtering joins\n- Four types of mutating joins\n  - `inner_join()`\n  - `full_join()`\n  - `left_join()`\n  - `right_join()`\n- For the most part we will use `left_join()`\n\n## `left_join()` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load readr\nlibrary(readr)\n\n# Perform left join using common iso3c variable and year\ndem_women <- left_join(democracy, women_emp, by = c(\"iso3c\", \"year\")) |> \n  rename(country = country.x) |> # rename country.x\n  select(!country.y)             # crop country.y\n\n# Save as .csv for future use\nwrite_csv(dem_women, \"data/dem_women.csv\")\n\n# View the data\nglimpse(dem_women)  \n```\n:::\n\n\n## Try it Yourself\n\n- Take your V-Dem data frame and your World Bank data frame\n- Using `left_join()` to merge on country code and year\n- Along the way, use `rename()` and `select()` to insure you have just one country name\n\n## Group, Summarize and Arrange\n\n- `group_by()`, `summarize()`, `arrange()`\n- A very common sequence in data science:\n  - Take an average or some other statistic for a group\n  - Rank from high to low values of summary value\n  \n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# group_by(), summarize() and arrange()\ndem_summary <- dem_women |> # save result as new object\n  group_by(region)  |> # group dem_women data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE), \n    flfp = mean(flfp, na.rm = TRUE), \n    women_rep = mean(women_rep, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_summary, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n## Try it Yourself {.scrollable}\n\n- Try running a `group_by()`, `summarize()` and `arrange()` in your Quarto document\n- Try changing the parameters to answer these questions: \n\n1. Try summarizing the data with a [different function](https://dplyr.tidyverse.org/reference/summarise.html#useful-functions) for one or more of the variables. \n  a. What is the median value of `polyarchy` for The West?\n  b. What is the max value of `gdp_pc` for Eastern Europe?\n  c. What is the standard deviation of `flfp` for Africa?\n  d. What is the interquartile range of `women_rep` for the Middle East?\n  \n2. Now try grouping by country instead of region. \n\n  a. What is the median value of `polyarchy` for Sweden?\n  b. What is the max value of `gdp_pc` New Zealand?\n  c. What is the standard deviation of `flfp` for Spain?\n  d. What is the interquartile range of `women_rep` for Germany?\n\n3. Sort countries in descending order based on the mean value of `gdp_pc` (instead of the median value of `polyarchy`). Which country ranks first based on this sorting?\n\n4. Now try sorting countries in ascending order based on the median value of `women_rep` (hint: delete \"desc\" from the `arrange()` call). Which country ranks at the \"top\" of the list?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}