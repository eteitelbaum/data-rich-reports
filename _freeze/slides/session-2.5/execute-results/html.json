{
  "hash": "b88b3ae675cb384894ec1ab3eedf1ad5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Rich Reports\"\nsubtitle: \"Session 2.5--Parameterized Reporting\"\nfooter: \"[DRR Website](https://quarto.training)\"\nlogo: images/drr6502-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n  eval: false\nincremental: true\nfilters:\n  - line-highlight\n---\n\n::: {.cell}\n\n:::\n\n\n## What is Parameterized Reporting?\n\n- Make one template report in Quarto\n- Create R script file that allows you to make multiple reports from this template\n\n## Why Parameterized Reporting?\n\n- Allows you to make multiple reports at once\n- Avoids copy paste issues if you were to make multiple reports by hand\n- It feels like magic!\n\n## Parameterized Reports We Have Made\n\n---\n\n[![](../images/ivac-country-reports.png)](https://www.jhsph.edu/ivac/resources/pdpr/)\n\n---\n\n[![](../images/psc.png)](https://housingprofiles.pschousing.org/)\n\n## How Does Parameterized Reporting Work?\n\n. . .\n\n::: bg-light\n::: r-stack\n![](https://raw.githubusercontent.com/jadeynryan/2023_posit-parameterized-quarto/main/images/template1.png){.fragment fig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\" fig-align=\"center\" width=\"1300\"}\n\n![](https://raw.githubusercontent.com/jadeynryan/2023_posit-parameterized-quarto/main/images/template2.png){.fragment fig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\" fig-align=\"center\" width=\"1300\"}\n\n![](https://raw.githubusercontent.com/jadeynryan/2023_posit-parameterized-quarto/main/images/template3.png){.fragment fig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\" fig-align=\"center\" width=\"1300\"}\n:::\n:::\n\nSource: [Jadey Ryan](https://jadeynryan.github.io/2023_posit-parameterized-quarto/#/title-slide)\n\n## Manually Create Multiple Reports\n\n- You can manually make multiple reports by, for example, adjusting the country you filter on in your Quarto document\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filtered <-\n  gapminder |> \n  filter(country == \"Afghanistan\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder_filtered,\n       aes(x = year,\n           y = lifeExp,\n           group = country)) +\n  geom_line() +\n  theme_minimal()\n```\n:::\n\n\n\n## Parameters\n\n```\n---\ntitle: \"Report on Life Expectancy\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n```\n\n::: {.notes}\n- Show report without parameters\n- Add parameters\n- Render one report\n- Render another report by changing parameter\n:::\n\n## Parameters\n\n**YAML**\n\n```\n---\ntitle: \"Report on Life Expectancy\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\nparams: \n  country: Afghanistan \n---\n```\n\n. . .\n\n**Code**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filtered <-\n  gapminder |> \n  filter(country == params$country)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder_filtered,\n       aes(x = year,\n           y = lifeExp,\n           group = country)) +\n  geom_line() +\n  theme_minimal()\n```\n:::\n\n\n\n## Your Turn\n\n- Install the `usethis` package with `install.packages(\"usethis\")`\n- Run `usethis::use_course(\"https://github.com/rfortherestofus/gw-parameterized-report-example/archive/refs/heads/main.zip\")' and answer yes to the questions it gives you\n- Open the project (it should happen automatically)\n- Open the `report.qmd` file and save it as `report2.qmd`\n- Change the `country` parameter in the YAML to be called `continent` and set the default value to be \"Asia\"\n- Adjust the code that creates the `gapminder_filtered` data frame so that it filters to use the `continent` parameter\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5f17141b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Use Parameters for Inline Code\n\n\n\n```{.r .cell-code}\n## Life Expectancy in `r params$country`\n```\n\n\n::: {.notes}\n- Show header\n- Also add text that shows min and max years\n:::\n\n## Your Turn\n\n- Working in your `report2.qmd` file, use inline code to create a line that says \"This report is on population in [CONTINENT] from 1952 to 2007.\"\n- Use inline code to make the [CONTINENT] portion use your parameter\n- If you finish early, write code to make the 1952 and 2007 values show up using inline R code\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_13e9595d\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Render with R Script\n\n- Create a new file (`render.R` is what I typically call it)\n- Use the `quarto_render()` function from the `quarto` package:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quarto)\n\nquarto_render(\n  input = \"report.qmd\"\n)\n```\n:::\n\n\n::: {.notes}\n- Render report with `quarto_render()`\n- But this isn't really much more efficient than rendering in .qmd file\n:::\n\n## Your Turn\n\n- Install the `quarto` package using `install.packages(\"quarto\")`\n- Open the file called `render.R` file and save it as `render2.R`\n- Adjust the code to render your `report2.qmd` document using the `quarto_render()` function\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_311cbb7e\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Add Arguments to `quarto_render()`\n\n- Add additional arguments to `quarto_render()`:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quarto)\n\nquarto_render(\n  input = \"report.qmd\",\n  output_file = \"Afghanistan.html\",\n  execute_params = list(country = \"Afghanistan\")\n)\n```\n:::\n\n\n::: {.notes}\n- Just render one report with these arguments\n:::\n\n## Your Turn\n\n- Working in the `render2.R` file, add an `execute_params` argument to the `quarto_render()` function to render the report for Africa\n- Also change the name of the rendered HTML file to `Africa.html` using the `output_file` argument\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_6efa61b3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Render Multiple Reports with `quarto_render()`\n\n- Create a tibble (i.e. data frame) with the data for all of the reports you want to create:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <-\n  gapminder |>\n  distinct(country) |>\n  pull(country) |>\n  as.character()\n\nreports <-\n  tibble(\n    input = \"report.qmd\",\n    output_file = str_glue(\"reports/{countries}.html\"),\n    execute_params = map(countries, ~list(country = .))\n  )\n```\n:::\n\n\n\n## Render Multiple Reports with `quarto_render()`\n\n- Use the `pwalk()` function from the `purrr` package to render all reports:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npwalk(reports, quarto_render)\n```\n:::\n\n\n## Your Turn\n\n- Working in the `render2.R` file, create a vector called `continents` that has all continents for which we want to make reports. Use the code below as a model.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <-\n  gapminder |>\n  distinct(country) |>\n  pull(country) |>\n  as.character()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_31c5c376\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Your Turn\n\n- Working in the `render2.R` file, create a tibble called `reports` that has all of the data needed to render all reports. Use the code below as a model.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreports <-\n  tibble(\n    input = \"report.qmd\",\n    output_file = str_glue(\"reports/{countries}.html\"),\n    execute_params = map(countries, ~list(country = .))\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_33336b6b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0%;bottom:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Your Turn\n\n- Working in the `render2.R` file, use the `pwalk()` function from the `purrr` package to render all reports. Use the code below as a model.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npwalk(VECTOR, FUNCTION)\n```\n:::\n\n\n## Additional Exercise\n\n- Create a set of parameterized reports for each year that have a bar chart that shows the population in each country\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}