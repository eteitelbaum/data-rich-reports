{
  "hash": "c35bef1bc264e913c940d82f7c13945a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Rich Reports\"\nsubtitle: \"Session 2.5--Parameterized Reporting\"\nfooter: \"[DRR Website](https://quarto.training)\"\nlogo: images/drr6502-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n  eval: false\nincremental: true\nfilters:\n  - line-highlight\n---\n\n\n## What is Parameterized Reporting?\n\n## Why Parameterized Reporting?\n\n- Allows you to make multiple reports at once\n- Avoids copy paste issues if you were to make multiple reports by hand\n- It feels like magic!\n\n## Parameterized Reports We Have Made\n\n---\n\n![](../images/ivac-country-reports.png)\n\n---\n\n![](../images/psc.png)\n\n\n## Parameters\n\n```\n---\ntitle: \"Report on Life Expectancy\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n```\n\n::: {.notes}\n- Show report without parameters\n- Add parameters\n- Render one report\n- Render another report by changing parameter\n:::\n\n## Parameters\n\n**YAML**\n\n```\n---\ntitle: \"Report on Life Expectancy\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\nparams: \n  country: Afghanistan \n---\n```\n\n. . .\n\n**Code**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filtered <-\n  gapminder |> \n  filter(country == params$country)\n```\n:::\n\n\n\n## Use Parameters for Inline Code\n\n\n\n```{.r .cell-code}\n## Life Expectancy in `r params$country`\n```\n\n\n::: {.notes}\n- Show header\n- Also add text that shows min and max years\n:::\n\n## Render with R Script\n\n- Create a new file (`render.R` is what I typically call it)\n- Use the `quarto_render()` function from the `quarto` package:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quarto)\n\nquarto_render(\n  input = \"report.qmd\"\n)\n```\n:::\n\n\n::: {.notes}\n- Render report with `quarto_render()`\n- But this isn't really much more efficient than rendering in .qmd file\n:::\n\n## Add Arguments to `quarto_render()`\n\n- Add additional arguments to `quarto_render()`:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quarto)\n\nquarto_render(\n  input = \"report.qmd\",\n  output = \"Afghanistan.html\",\n  execute_params = list(country = \"Afghanistan\")\n)\n```\n:::\n\n\n::: {.notes}\n- Just render one report with these arguments\n:::\n\n## Render Multiple Reports with `quarto_render()`\n\n- Create a tibble (i.e. data frame) with the data for all of the reports you want to create:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <-\n  gapminder |>\n  distinct(country) |>\n  pull(country) |>\n  as.character()\n\nreports <-\n  tibble(\n    input = \"report.qmd\",\n    output_file = str_glue(\"reports/{countries}.html\"),\n    execute_params = map(countries, ~ list(country = .))\n  )\n```\n:::\n\n\n\n## Render Multiple Reports with `quarto_render()`\n\n- Use the `pwalk()` function from the `purrr` package to render all reports:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npwalk(reports, quarto_render)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}