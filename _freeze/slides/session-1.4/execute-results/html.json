{
  "hash": "36a0de551488ef41a2b67c5788fbe0d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Rich Reports\"\nsubtitle: \"Session 4--Visualizing Data\"\nfooter: \"[DRR Website](https://quarto.training)\"\nlogo: images/drr6502-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n# Bar Charts\n\n## The Grammar of Graphics\n\n::: {.incremental}\n- Data viz has a language with its own grammar\n- Basic components include:\n  - Data we are trying to visualize\n  - Aesthetics (dimensions)\n  - Geom (e.g. bar, line, scatter plot)\n  - Color scales\n  - Themes\n  - Annotations\n::: \n\n## \n\n<br>\n\nLet's load our packages and import our data...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4\"}\nlibrary(readr)\nlibrary(ggplot2)\n\ndem_summary <- read_csv(\"dem_summary.csv\")\n\nggplot(dem_summary, aes(x = region, y = polyarchy)) \n```\n:::\n\n  \n## \n\n<br>\n\nAnd then let's start with the first two elements, the data and the aesthetic...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nlibrary(readr)\nlibrary(ggplot2)\n\ndem_summary <- read_csv(\"dem_summary.csv\")\n\nggplot(dem_summary, aes(x = region, y = polyarchy)) \n```\n:::\n\n\n##\n\nThis gives us the axes without any visualization:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart2-1.png){width=960}\n:::\n:::\n\n\n\n##\n\n<br>\n\nNow let's add a geom. In this case we want a bar chart so we *add* `geom_col()`.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col()\n```\n:::\n\n\n## \n\nThat gets the idea across but looks a little depressing, so...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart4-1.png){width=960}\n:::\n:::\n\n\n## \n\n<br>\n\n...let's change the color of the bars by specifying `fill = \"steelblue\"`.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\")\n```\n:::\n\n\n## \n\nNote how color of original bars is simply overwritten:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart6-1.png){width=960}\n:::\n:::\n\n\n## \n\n<br>\n\nNow let's *add* some labels with the `labs()` function:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-8\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\") +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n## \n\nAnd that gives us... \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart8-1.png){width=960}\n:::\n:::\n\n\n## \n\nNext, we reorder the bars with `fct_reorder()` from the `forcats` package. \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nlibrary(forcats)\n\nggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n<br> \n\nNote that we could also use the base R `reorder()` function here.\n\n## \n\nThis way, we get a nice, visually appealing ordering of the bars according to levels of democracy...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart10-1.png){width=960}\n:::\n:::\n\n\n## \n\n<br>\n\nNow let's change the theme to `theme_minimal()`. \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    ) + theme_minimal()\n```\n:::\n\n\n## \n\nGives us a clean, elegant look. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart12-1.png){width=960}\n:::\n:::\n\n\n\n##\n\n<br>\n\nNote that you can also save your plot as an object to modify later.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\")\n```\n:::\n\n\n##\n\nWhich gives us...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart14-1.png){width=960}\n:::\n:::\n\n\n## \n\n<br> \n\nNow let's add back our labels... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n##\n\nSo now we have... \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart16-1.png){width=960}\n:::\n:::\n\n\n## \n\n<br> \n\nAnd now we'll add back our theme...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart + theme_minimal()\n```\n:::\n\n\n##\n\nVoila! \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart18-1.png){width=960}\n:::\n:::\n\n\n##\n\nChange the theme. There are many [themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) to choose from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart + theme_bw()\n```\n\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/barchart19-1.png){width=960}\n:::\n:::\n\n\n## Your Turn!\n\n1. `glimpse()` the data\n2. Find a new variable to visualize\n3. Make a bar chart with it\n4. Change the [color](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) of the bars\n5. Order the bars\n6. Add labels\n7. Add a [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n8. Try saving your plot as an object\n9. Then change the labels and/or theme\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Line Charts\n\n## Line Chart Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vdemdata)\nlibrary(tidyverse)\n\ndem_waves_ctrs <- vdem |>\n  select(\n    country = country_name,     \n    year, \n    polyarchy = v2x_polyarchy, \n  ) |>\n  filter( \n    country %in% c(\"United States of America\", # select countries in this list\n                   \"Japan\", \n                   \"Portugal\")\n    )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Line Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/geom_line1-1.png){width=960}\n:::\n:::\n\n\n##\n\n<br>\n\nHere is the code... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  )\n```\n:::\n\n\n## \n\n<br>\n\nUse `geom_line()` to specify a line chart... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  )\n```\n:::\n\n\n## \n\n<br>\n\nAdd third dimension to the `aes()` call for line color...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  )\n```\n:::\n\n\n## \n\n<br>\n\nModify the legend title...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  )\n```\n:::\n\n\n## Problem\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/cvd_plot-1.png){width=960}\n:::\n:::\n\n\n## Color Blindness\n\n<br>\n\n- Color Vision Deficiency (CVD) or color blindness affects 8 percent of men and 1 in 200 women\n- There are different types of CVD but most common is red-green color blindness\n- Therefore, don't include red and green in the same chart! \n- Look for color blind safe palettes\n\n## \n\n**Solution:** Use a colorblind safe color scheme like `viridis`...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/geom_line6-1.png){width=960}\n:::\n:::\n\n\n##\n\n<br>\n\nUse `scale_color_viridis_d()` in this case to specify the viridis color scheme...\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"11\"}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  ) +\n  scale_color_viridis_d(option = \"mako\", end = .8) # use viridis color palette\n```\n:::\n\n\n## Better!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/cvdplot2-1.png){width=960}\n:::\n:::\n\n\n## Palettes\n\n<br>\n\n- There are a number of viridis palettes\n- See [this reference](https://search.r-project.org/CRAN/refmans/viridisLite/html/viridis.html) to view different palettes and options\n- You can also use `scale_color_viridis_c()` to specify a continuous color scale \n- Also check out the [paletteer package](https://emilhvitfeldt.github.io/paletteer/) for easy access to many more palettes\n\n## Your Turn!\n\n<br>\n\n- See table three of [this article](https://kurzman.unc.edu/wp-content/uploads/sites/1410/2011/06/Kurzman_Waves_of_Democratization.pdf)\n- Select three countries to visualize\n- Adjust setup code to filter data on those countries \n- Visualize with `geom_line()`\n- Use `scale_color_viridis_d()` to specify a viridis color scheme\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Bonus Material \n\n## Superfun Data Visualization\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/gganimate_1-1.gif)\n:::\n:::\n\n\n## Superfun Data Visualization\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\nlibrary(gapminder)\n\nggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +\n  transition_time(year) +\n  ease_aes('linear')\n```\n:::\n\n\n## Superfun Data Visualization\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,10-12\"}\nlibrary(gganimate)\nlibrary(gapminder)\n\nggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +\n  transition_time(year) +\n  ease_aes('linear')\n```\n:::\n\n\n## Extended `vdemdata` Example {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## \n\nUse `filter()` to select years...\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> # keep 2015\n  select(                 \n    country = country_name,       \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region,\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n## \n\nUse `select()` to choose variables...\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-11\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> \n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, \n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n## \n\nUse `mutate` with `case_match()` to Recode Region....\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-23\"}\n# Download the data\ndemocracy <- vdem |>\n  filter(year == 2015)  |> \n  select(                  \n    country = country_name,     \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n```\n:::\n\n\n## Visualize It! \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](session-1.4_files/figure-revealjs/scatterplot2-1.png){width=960}\n:::\n:::\n\n\n## Visualize It! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(democracy, aes(x = gdp_pc, y = polyarchy)) + \n  geom_point(aes(color = region)) + \n  geom_smooth(method = \"lm\", linewidth = 1) + \n  scale_x_log10(labels = scales::label_number(prefix = \"$\", suffix = \"k\")) +\n  labs(\n    x= \"GDP per Capita\", \n    y = \"Polyarchy Score\",\n    title = \"Wealth and democracy in 2015\", \n    caption = \"Source: V-Dem Institute\", \n    color = \"Region\"\n    ) +\n  scale_color_viridis_d(option = \"inferno\", end = .8)\n```\n:::\n\n\n## Try it Yourself\n\n- Go to the V-Dem [Codebook](https://www.v-dem.net/documents/24/codebook_v13.pdf) \n- Select a democracy indicator from Part 2.1 (high level indicators) to visualize\n- Note the indicator code (e.g. \"v2x_polyarchy\" for the polyarchy score)\n- Change the code and download the data so you can visualize it\n- Now make a scatter plot of your indicator versus GDP\n\n# Coding Assignment 1\n\n## Coding Assignment 1\n\n<br>\n\n- Let's get started on the first assignment\n- Instructions for Coding Assignment 1 are [here](https://quarto.training/assignments/coding-assignment-1)\n- Due by 11:59pm on Sunday, February 25",
    "supporting": [
      "session-1.4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}