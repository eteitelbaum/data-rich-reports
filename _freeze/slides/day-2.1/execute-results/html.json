{
  "hash": "1079d48c407b025990962b0f8870aeb8",
  "result": {
    "markdown": "---\ntitle: Downloading Data from an API\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## APIs\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n- In our case, we will use APIs to download social science data\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Usually easier than reading in data from messy flat file\n\n## This Lesson\n\n- Access two APIs with R packages\n- World Bank data through `wbstats`\n  - There is another package called `WDI`\n- Varieties of Democracy (V-Dem) through `vdemdata`\n  - This is the only package for V-Dem\n  - Just downloads all the data\n  - So we have to use `dplyr` functions like `fliter()` and `select()`\n\n## Searching for WB Indicators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflfp_indicators <- wb_search(\"female labor force\") # store the list of indicators\n\nprint(flfp_indicators, n=26) # view the indicators\n```\n:::\n\n  \n## Try it Yourself\n\n- Start a new Quarto document\n- Start a new code chunk\n- Load the `wbstats` package\n- Use `wb_search()` to find some indicators you are interested in\n\n## `wbstats` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(wbstats) # for downloading WB data\nlibrary(dplyr) # for selecting, renaming and mutating\nlibrary(janitor) # for rounding\n\n# Store the list of indicators in an object\nindicators <- c(\"flfp\" = \"SL.TLF.CACT.FE.ZS\", \"women_rep\" = \"SG.GEN.PARL.ZS\") \n\n# Download the data  \nwomen_emp <- wb_data(indicators, mrv = 50) |> # download data for last 50 yrs\n  select(!iso2c) |> # drop the iso2c code which we won't be using\n  rename(year = date) |> # rename date to year \n  mutate(\n    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th\n    women_rep = round_to_fraction(women_rep, denominator = 100) \n  )\n\n# View the data\nglimpse(women_emp) \n```\n:::\n\n\n## Try it Yourself\n\n- Using the variables you identified in your search, download the data\n- Think about what elements of the code you need to change\n- Hint: the indicators are going to change!\n\n## Downloading V-Dem Data\n\n- The `vdem` function from `vdemdata` just downloads the data\n- There are no parameters for selecting indicators or date ranges\n- So we have to do more work with `dplyr` functions\n  - `filter()` for years\n  - `select()` for variables\n- We are also going to use `case_match()` to add \n\n## `vdemdata` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990)  |> # filter out years less than 1990\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## Try it Yourself\n\n- Go to the V-Dem [Codebook](https://www.v-dem.net/documents/24/codebook_v13.pdf) \n- Select a democracy indicator from Part III and one other indicator\n- Note the indicator code (e.g. \"v2x_polyarchy\" for the polyarchy score)\n- In your Quarto notes document, create a new code chunk\n- Use the codes for your selected indicators to download the data\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}