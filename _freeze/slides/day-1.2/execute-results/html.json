{
  "hash": "cdebd492d309501bf168a794128d170d",
  "result": {
    "markdown": "---\ntitle: Reading Data Into R\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## What are Tidy Data?\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg)\n\n## What are Clean Data?\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format, for example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n## Step 1: Download Some Messy Data\n\n- Create a folder called \"data\" in your course modules project folder\n- Following the instructions in module 1.1, download some messy WB data\n- Make it something other than FLFP\n- Donwload as a CSV file with a unique file name and store in your data folder\n\n## Step 2: Read the Data Into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(readr) \nlibrary(dplyr) \n\n# Read data from csv file into an object called \"wb_data_messy\"\nwb_data_messy <- read_csv(\"data/your_file_name.csv\")\n\n# View the data\nglimpse(wb_data_messy)\n```\n:::\n\n\nAlso try viewing with `View(\"wb_data_messy\")` or by clicking on object.\n\n## Step 3: Write a New CSV File\n\nNow try writing the same data to a file with a different name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(wb_data_messy, \"data/your_new_file_name.csv\")\n```\n:::\n\n\n## Try With Excel\n\n- Have a look at the readr [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf)\n- Download some more data from WB but this time as an excel file\n- Follow same steps as with CSV file\n  - use `read_excel()` to read in the data\n  - install and experiment with [writexl](https://cran.r-project.org/web/packages/writexl/index.html)\n\n## Column Specifications\n\n- Can clean columns on backend\n- But can also specify data types in `read_csv()` or `read_excel()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(wb_data_messy)\n\nwb_data_messy <- read_csv(\"data/your_file_name.csv\", \n                          col_types = cols(\n                           col_double(`1990 [YR1990]`) \n                          )\n                          )\n```\n:::\n\n\n## Still Time Left?\n\n- Play with `googlesheets4`\n- Find a flatfile with a URL\n- Import into R\n- Specify column types\n- Try writing a google sheet\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}