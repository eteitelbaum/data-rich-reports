{
  "hash": "07a6ff6a4aef72a34997b5d5878793f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working With Data\ndate: today\ndate-format: long\nfooter: \"[DataViz 6502 Website](https://dataviz-esia.training)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\n    multiplex: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## What are Tidy Data?\n\n<br>\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg)\n\n## What are Clean Data?\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format, for example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n## Step 1: Downloaded Some Messy Data\n\n<br>\n\n- Created a folder called \"data\" in your course modules project folder\n- Downloaded some messy WB data\n\n## Step 2: Read the Data Into R\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(readr) \nlibrary(dplyr) \n\n# Read data from csv file into an object called \"wb_data_messy\"\nwb_data_messy <- read_csv(\"data/your_file_name.csv\")\n\n# View the data\nglimpse(wb_data_messy)\n```\n:::\n\n\nViewed with `View(\"wb_data_messy\")` or by clicking on object...\n\n## Step 3: Wrote a New CSV File\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(wb_data_messy, \"data/your_new_file_name.csv\")\n```\n:::\n\n\n## With Excel\n\n- Can do the same thing with Excel files\n- Have a look at the readr [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf)\n- Follow same steps as with CSV file\n  - use `read_excel()` to read in the data\n  - install and experiment with [writexl](https://cran.r-project.org/web/packages/writexl/index.html)\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n## Pivot Longer\n\n<br>\n\n`pivot_longer()` takes three arguments:\n\n- **cols** - which columns you want to pivot\n- **names_to** - the name of the column where the old column names are going to (identifier)\n- **values_to** - the name of the column where the values are going to\n\n## \n\nCan you remember how to make `pivot_longer()` work? \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\n      <-    |>\n  pivot_longer(\n    cols = \n    names_to = \n    values_to = \n  )\n\nglimpse()\n```\n:::\n\n\n## \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\nwb_data <- wb_data_messy |> \n  pivot_longer(             \n    cols = `1973 [YR1973]`: `2022 [YR2022]`, # columns to pivot\n    names_to = \"year\", # name the identifier column \"year\"\n    values_to = \"flfp\" # name the numeric var column \"flfp\"\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n## Mutating Variables\n\n<br>\n\n- Anytime we want to change a variable, we are going to use the `dplyr` verbs `mutate()` or `mutate_at()`\n- `mutate()` is if you want to change on variable\n- `mutate_at()` is for multiple variables\n\n## Fixing Our Variables\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix year and flfp\nwb_data <- wb_data |> # replace wb_data with a modified version of the dataframe \n  mutate(year = substring(year, 1, 4)) |> # truncate year (keep first four characters)\n  mutate_at(c(\"year\", \"flfp\"), as.numeric) # change year and flfp to numeric\n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n## Clean Variable Names\n\n| Very simple: use the `janitor` package!\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load janitor\nlibrary(janitor)\n\n# Apply clean_names() to wb_data, store in new data frame called wb_data_clean\nwb_data_clean <- wb_data |>  \n  clean_names() \n\n# Write wb_data_clean to a csv file\nwrite_csv(wb_data_clean, \"data/wb_data_clean.csv\")\n\n# View the data\nglimpse(wb_data_clean)\n```\n:::\n\n\n## APIs\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n- In our case, we will use APIs to download social science data\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Usually easier than reading in data from messy flat file\n\n## Datasets\n\n- World Bank data through `wbstats`\n  - There is another package called `WDI`\n- Varieties of Democracy (V-Dem) through `vdemdata`\n  - This is the only package for V-Dem\n  - No arguments\n  - Just downloads all the data!\n\n## Searching for WB Indicators\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflfp_indicators <- wb_search(\"female labor force\") # store the list of indicators\n\nprint(flfp_indicators, n=26) # view the indicators\n```\n:::\n\n  \n## Try it Yourself\n\n- Start a new Quarto document\n- Start a new code chunk\n- Load the `wbstats` package\n- Use `wb_search()` to find some indicators you are interested in\n- If search is not successful, visit [WDI site](https://databank.worldbank.org/source/world-development-indicators)\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"setup\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## `wbstats` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(wbstats) # for downloading WB data\nlibrary(dplyr) # for selecting, renaming and mutating\nlibrary(janitor) # for rounding\n\n# Store the list of indicators in an object\nindicators <- c(\"flfp\" = \"SL.TLF.CACT.FE.ZS\", \"women_rep\" = \"SG.GEN.PARL.ZS\") \n\n# Download the data  \nwomen_emp <- wb_data(indicators, mrv = 50) |> # download data for last 50 yrs\n  select(!iso2c) |> # drop the iso2c code which we won't be using\n  rename(year = date) |> # rename date to year \n  mutate(\n    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th\n    women_rep = round_to_fraction(women_rep, denominator = 100) \n  )\n\n# View the data\nglimpse(women_emp) \n```\n:::\n\n\n## Try it Yourself\n\n<br>\n\n- Using the variables you identified in your search, download the data\n- Think about what elements of the code you need to change\n- Hint: the indicators are going to change!\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"quarto-pub\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Downloading V-Dem Data\n\n- The `vdem` function from `vdemdata` just downloads the data\n- There are no parameters for selecting indicators or date ranges\n- So we have to do more work with `dplyr` functions\n  - `filter()` for years\n  - `select()` for variables\n- We are also going to use `case_match()` to add \n\n## `vdemdata` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990)  |> # filter out years less than 1990\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## Try it Yourself\n\n- Go to the V-Dem [Codebook](https://www.v-dem.net/documents/24/codebook_v13.pdf) \n- Select a democracy indicator from Part II and one other indicator\n- Note the indicator code (e.g. \"v2x_polyarchy\" for the polyarchy score)\n- In your Quarto notes document, create a new code chunk\n- Use the codes for your selected indicators to download the data\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}