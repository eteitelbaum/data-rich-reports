{
  "hash": "39adb86bba6cf189d42ddcc7dd245f72",
  "result": {
    "markdown": "---\ntitle: Wrangling Data\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## Read Data \n\n(from last class)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(readr) \nlibrary(dplyr) \n\n# Read data from csv file into an object called \"wb_data_messy\"\nwb_data_messy <- read_csv(\"data/your_file_name.csv\")\n\n# View the data\nglimpse(wb_data_messy)\n```\n:::\n\n\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n## Pivot Longer\n\n`pivot_longer()` takes three arguments:\n\n- **cols** - which columns you want to pivot\n- **names_to** - the name of the column where the old column names are going to (identifier)\n- **values_to** - the name of the column where the values are going to\n\n## Without Looking\n\n- Can you remember how to make `pivot_longer()` work? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\n      <-    |>\n  pivot_longer(\n    cols = \n    names_to = \n    values_to = \n  )\n\nglimpse()\n```\n:::\n\n\n## Pivot Data \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\nwb_data <- wb_data_messy |> \n  pivot_longer(             \n    cols = `1973 [YR1973]`: `2022 [YR2022]`, # columns to pivot\n    names_to = \"year\", # name the identifier column \"year\"\n    values_to = \"flfp\" # name the numeric var column \"flfp\"\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n## Try With Multiple Variables\n\n- Download more than one variable from the WB \n- Save in a new CSV file\n- Use pivot longer to put in long format\n- And then...\n\n## Multiple Variables\n  \nUse `pivot_wider()`\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nwb_data <- wb_data |>\n  select(-`Series Name`)\n\n# Reshape the data\ntidy_data <- wb_data |> \n  pivot_wider(             \n    names_from = `Series Code`,\n    values_from = values\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n## Mutating Variables\n\n- Anytime we want to change a variable, we are going to use the `dplyr` verbs `mutate()` or `mutate_at()`\n- `mutate()` is if you want to change on variable\n- `mutate_at()` is for multiple variables\n\n## Let's Fix Our Variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix year and flfp\nwb_data <- wb_data |> # replace wb_data with a modified version of the dataframe \n  mutate(year = substring(year, 1, 4)) |> # truncate year (keep first four characters)\n  mutate_at(c(\"year\", \"flfp\"), as.numeric) # change year and flfp to numeric\n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n## Now Try it With Multiple Varaibles\n\n- Go to the data frame with multiple variables that you created earlier\n- How would you modify this code to make sure the variables are in the right format? \n\n# Clean Variable Names\n\n| Very simple: use the `janitor` package!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load janitor\nlibrary(janitor)\n\n# Apply clean_names() to wb_data, store in new data frame called wb_data_clean\nwb_data_clean <- wb_data |>  \n  clean_names() \n\n# Write wb_data_clean to a csv file\nwrite_csv(wb_data_clean, \"data/wb_data_clean.csv\")\n\n# View the data\nglimpse(wb_data_clean)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}