{
  "hash": "038048e28f2cff91a2a752ecec44408a",
  "result": {
    "markdown": "---\ntitle: Bar Charts and Histograms\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## The Grammar of Graphics\n\n- Data viz has a language with its own grammar\n- Basic components include:\n  - Data we are trying to visualize\n  - Aesthetics (dimensions)\n  - Geom (e.g. bar, line, scatter plot)\n  - Color scales\n  - Themes\n  - Annotations\n  \n## \n\nLet's start with the first two, the data and the aesthetic. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nlibrary(readr)\nlibrary(ggplot2)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nggplot(dem_summary, aes(x = region, y = polyarchy)) \n```\n:::\n\n\n##\n\nGives us the axes without any visualization. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart1.1-1.png){width=960}\n:::\n:::\n\n\n\n##\n\nNow let's add a geom. In this case we want a bar chart so we *add* `geom_col()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col()\n```\n:::\n\n\n## \n\nOK but that gets the idea across but looks a little depressing so...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart2.1-1.png){width=960}\n:::\n:::\n\n\n## \n\n...let's change the color of the bars by specifying `fill = \"steelblue\"`. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\")\n```\n:::\n\n\n## \n\nNote how color of original bars is simply overwritten.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart3.1-1.png){width=960}\n:::\n:::\n\n\n## \n\nNow let's *add* some labels with the `labs()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-8\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\") +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n## \n\nAnd that gives us... \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart4.1-1.png){width=960}\n:::\n:::\n\n\n## \n\nNext, we reorder the bars with the `reorder()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n## \n\nThis way, we get a nice, visually appealing ordering of the bars according to levels of democracy...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart5.1-1.png){width=960}\n:::\n:::\n\n\n## \n\nJumping ahead a little, let's change the theme to `theme_minimal()`. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    ) + theme_minimal()\n```\n:::\n\n\n\n## \n\nGives us a clean, elegant look. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart6.1-1.png){width=960}\n:::\n:::\n\n\n\n##\n\nNote that you can also save your plot as an object to modify later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\")\n```\n:::\n\n\n##\n\nWhich gives us...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart7.1-1.png){width=960}\n:::\n:::\n\n\n## \n\nNow let's add our labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n\n##\n\nSo now we have... \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart8.1-1.png){width=960}\n:::\n:::\n\n\n## \n\nNow let's add our theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart + theme_minimal()\n```\n:::\n\n\n##\n\nVoila! \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart9.1-1.png){width=960}\n:::\n:::\n\n\n##\n\nChange the theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart + theme_bw()\n```\n\n::: {.cell-output-display}\n![](day-2.3_files/figure-revealjs/barchart10-1.png){width=960}\n:::\n:::\n\n\n\n## Your Turn! {.smaller}\n\n<br>\n\n*Use your own wrangled data or this code to get started:*\n\n<br>\n\n\n::: {.cell evakl='false'}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(ggplot2)\n\ndem_summary <- read_csv(\"https://raw.githubusercontent.com/eteitelbaum/dataviz-fall-2023/main/modules/data/dem_summary.csv\")\n```\n:::\n\n\n## \n\n1. `glimpse()` the data\n2. Find a new variable to visualize\n3. Make a bar chart with it\n4. Change the [color](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) of the bars\n5. Order the bars\n6. Add labels\n7. Add a [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n8. Try saving your plot as an object\n9. Then change the labels and/or theme\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"exercise1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Now Try a Histogram\n\n<br>\n\n*Use this code or your own wrangled data to get started*\n\n<br> \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_women <- read_csv(\"https://raw.githubusercontent.com/eteitelbaum/dataviz-fall-2023/main/modules/data/dem_women.csv\")\n```\n:::\n\n\n##\n\n1. Pick a variable that you want to explore the distribution of\n2. Make a histogram\n    a. Only specify `x = ` in `aes()`\n    b. Specify geom as `geom_histogram`\n3. Choose color for bars\n4. Choose appropriate labels\n5. Add a theme\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"exercise2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n",
    "supporting": [
      "day-2.3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}