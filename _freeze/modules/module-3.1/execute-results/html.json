{
  "hash": "5aa910b92777f9f8573e266801a79e4c",
  "result": {
    "markdown": "---\ntitle: \"Module 3.1\"\nsubtitle: \"Choropleth Maps\"\nformat: html\nhighlight-style: atom-one\nexecute:\n  echo: true\n  message: false\n  warning: false\n---\n\n\n::: {.callout-tip}\n## Prework\n\n- Install `rnaturalearth` (`install.packages(\"rnaturalearth\")`) and have a look at the [documentation](https://cran.r-project.org/web/packages/rnaturalearth/vignettes/rnaturalearth.html)\n- Install `ggthemes` (`install.packages(\"ggthemes\")`)and have a look at [this post](https://rpubs.com/Mentors_Ubiqum/ggthemes_1)) for a brief explanation of how it works\n- Create a Quarto document called \"module-3.1.qmd\" in your modules folder for the code-along\n- Install `magick` and underlying file system to [remove whitespace](https://www.pmassicotte.com/posts/2022-08-15-removing-whitespace-around-figures-quarto/) around maps\n- Then insert this code chunk somewhere in your module 3.1 Quarto document:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a hook to crop maps as recommended by pmassicotte\n# must have `magick` and its dependencies installed\n\nknitr::knit_hooks$set(crop = knitr::hook_pdfcrop)\n```\n:::\n\n:::\n\n## Overview\n\nThe focus of this module is going to be on how to make *choropleth maps*. A choropleth map is a type of data visualization used to show a geographical distribution of data where areas or regions are shaded based on quantities or levels represented in each area or region. \n\nOne important concept in mapping that we are going to come across this week: [simple features](https://r.geocompx.org/spatial-class.html#intro-sf). Simple features is a formal international standard for representing objects in the real world in digital space. \n\nA \"feature\" is basically any object in the real world that can be represented in two or three-dimensional space. A tree or a house can be a feature as can a forest or a body of water. But in politics we are usually focused on mapping the political boundaries of different administrative units like countries, states or provinces, counties and cities.\n\nSimple features allow us to work with such boundaries easily in a data frame in R. We can take all of the points associated with a geometry and store it in a special data frame column (usually labeled 'geom' or 'geometry'). This ability to store all of the geographic information in one column differs from how spatial data are organized under the traditional [spatial objects](https://cran.r-project.org/web/packages/sp/vignettes/intro_sp.pdf) standard and makes it much easier to work with geographic data in R.\n\n## Using rnaturalearth\n\n{{< video https://youtu.be/HB3PMF93hzs title = 'Using rnaturalearth'>}}\n\nIn this module we are going to be with the [rnaturalearth](https://cran.r-project.org/web/packages/rnaturalearth/rnaturalearth.pdf) package, which facilitates working with [Natural Earth](https://www.naturalearthdata.com/) map data in R. Natural Earth is a public domain map dataset based on Tom Patterson's Natural Earth [projection](https://en.wikipedia.org/wiki/Natural_Earth_projection) that provides data suitable for making small-scale world, regional and country maps. Natural Earth contains country boundaries, first-order admin boundaries like provinces and states, urban polygons and [more](https://www.naturalearthdata.com/features/). `rnaturalearth` supports both simple features (`sf`) and spatial objects (`sp`) formats, but we are going to be focused on using simple features for the reasons stated earlier. \n\n### Grabbing country shapes with ne_countries()\n\nLet's start by loading country shapes using the `ne_countries()` function from `rnaturalearth`. We will start by loading `rnaturalearth` and `dplyr`. Next we will load the country boundaries into an object called `world_map_df` while filtering out Antarctica. Then, let's `glimpse()` the data and have a closure look at the `geometry` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nlibrary(dplyr)\n\nworld_map_df <- ne_countries(scale = \"medium\", returnclass = \"sf\") |>\n    filter(name != \"Antarctica\") # remove Antarctica\n\n#world_map_df |>\n#glimpse()\n\n# view contents of geometry column\nworld_map_df |>\n  select(geometry) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 241 features and 0 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -58.49229 xmax: 180 ymax: 83.59961\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                         geometry\n1  MULTIPOLYGON (((31.28789 -2...\n2  MULTIPOLYGON (((30.39609 -1...\n3  MULTIPOLYGON (((53.08564 16...\n4  MULTIPOLYGON (((104.064 10....\n5  MULTIPOLYGON (((-60.82119 9...\n6  MULTIPOLYGON (((12.43916 41...\n7  MULTIPOLYGON (((166.7458 -1...\n8  MULTIPOLYGON (((70.94678 42...\n9  MULTIPOLYGON (((-53.37061 -...\n10 MULTIPOLYGON (((162.9832 5....\n```\n:::\n:::\n\n\n### Make a map with geom_sf()\n\nNow, let's make our first choropleth map with the data. Let's map World Bank income groups. Here we will use the special features `geom_sf()` from `ggplot2` and for our aesthetics mapping we will specify `fill = income_grp`. \n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = world_map_df) +\n  geom_sf(aes(fill = income_grp)) + \n  labs(title = \"World Bank country income categories\")\n```\n\n::: {.cell-output-display}\n![](module-3.1_files/figure-html/first_map-1.png){width=672}\n:::\n:::\n\n\n\n### Beautify your map\n\nThe default ggplot settings are pretty good for a preview, but we could make it look a lot better. Let's add some labels, a `ggtheme` map theme and the default `viridis` color mapping.\n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n\nggplot(data = world_map_df) +\n  geom_sf(aes(fill = income_grp)) + \n  labs(\n    title = \"World Bank country income categories\",\n    fill = \"Category\"\n    ) +\n    scale_fill_viridis_d() +\n    theme_map() \n```\n\n::: {.cell-output-display}\n![](module-3.1_files/figure-html/beautify_map-1.png){width=672}\n:::\n:::\n\n\n## Using rnaturalearth to map other data\n\n{{< video https://youtu.be/5RnnGov3Iw4 title = 'Using rnaturalearth to map data'>}}\n\nNow that we know how to make a map with Natural Earth shapes and `geom_sf()`, we can merge in data and map data from other sources. Let's go ahead and merge some data on oil rents from the World Bank. We will do a `left_join()` based on iso3c country codes. In the World Bank data the iso3c codes are simply called \"iso3c.\" In `rnaturalearth` there are a number of options, but the best is \"iso3_a3_eh\" because at the time this lesson was written the codes for some of the others [are missing](https://github.com/ropensci/rnaturalearth/issues/77).   \n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nlibrary(wbstats)\n\noil_rents_df <- wb_data(c(oil_rents_gdp = \"NY.GDP.PETR.RT.ZS\"), mrnev = 1) \n\nrents_map_df <- left_join(world_map_df, oil_rents_df, join_by(iso_a3_eh == iso3c))\n\nrents_map_df |>\n  select(last_col(5):last_col()) |> #select last 5 columns of df\n  glimpse() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 241\nColumns: 6\n$ date          <dbl> 2021, 2021, 2018, 2021, 2014, NA, 2021, 2021, 2021, NA, …\n$ oil_rents_gdp <dbl> 0.047768809, 0.000000000, 4.823561531, 0.669314215, 11.3…\n$ obs_status    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ footnote      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ last_updated  <date> 2023-05-10, 2023-05-10, 2023-05-10, 2023-05-10, 2023-05…\n$ geometry      <MULTIPOLYGON [°]> MULTIPOLYGON (((31.28789 -2..., MULTIPOLYGO…\n```\n:::\n:::\n\n\nNow we can map these data. Everything here is pretty much the same as before, except we change the fill to `oil_rents_gdp`. We will also add a subtitle and make a few other cosmetic changes like shifting the position of the legend title, bolding the plot title and changing the `viridis` color scale from discrete to continuous. \n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nggplot(data = rents_map_df) +\n  geom_sf(aes(fill = oil_rents_gdp)) + # shade based on oil rents\n  labs(\n    title = \"Oil rents (% of GDP)\",\n    subtitle = \"(Most recent available data)\", # add subtitle\n    fill = \"Percent\", \n    caption = \"Source: World Bank Development Indicators\"\n    ) +\n  theme_map() +\n  theme(\n    legend.position = \"right\", \n    #legend.title = element_text(size = 8),\n    #legend.text = element_text(size = 6)\n    plot.title = element_text(face = \"bold\"), # move legend\n    ) +\n  scale_fill_viridis_c( # chg from discrete (_d) to continuous (_c)\n      option = \"magma\", #  chg to magma theme\n      labels = scales::label_percent(scale = 1) # add % label for legend\n      ) \n```\n\n::: {.cell-output-display}\n![](module-3.1_files/figure-html/oil_rents-1.png){width=672}\n:::\n:::\n\n\n## Turn your map into a function\n\n{{< video https://youtu.be/m42vrbEEHT4 title = 'Accessible Color Schemes'>}}\n\nSometimes you may want to map more than one variable in a paper or display variables with a map in an app. For these situations, it can help to create your own [function](https://r4ds.had.co.nz/functions.html) that allows you to change various components of the map code without having to type out all of the code every time you want to create a map. \n\n### Create the map function\n\nThe first thing that you want to do is to write out the script for your function. That should include any packages that you need to run that may not already be loaded. \n\nFrom there, you can build your function. The code for your function contains three elements: 1) a name; 2) the arguments you will include in your function; and 3) a code block of code that will execute when you call the function. \n\nIn this example, we are going to call our function `create_map()`. It is going to include five arguments: `var_id`, `title`, `legend_title`, `theme` and `direction`. `var_id` refers to the World Bank variable id, `title` and `legend_title` refer to the title of the plot and the title of the legend respectively. `theme` will allow the user to adjust the `viridis` theme. And `direction` refers to whether the color scale is light to dark or dark to light. \n\nThe code block will first join the country shapes to the selected World Bank data and then map those data by piping them into a `ggplot()` call. Everything is pretty similar to our previous use of `ggplot()` and `geom_sf()`, but one tricky part here is that we have to use `eval(parse(text=var_id))))` to remove the quotes surrounding the variable code entered by the user. \n\n\n::: {.cell execute='false'}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(wbstats)\n\ncreate_map <- function(var_id, title, legend_title, theme, direction){\n\nne_countries(scale = \"medium\", returnclass = \"sf\") |> \n  left_join(\n    wb_data(var_id, mrnev = 1), # change variable id\n    join_by(iso_a3_eh == iso3c)\n  ) |> \n  filter(name != \"Antarctica\") |>  \n  ggplot() + \n  geom_sf(aes(fill = eval(parse(text=var_id)))) + # remove quotes\n  labs(\n    title =  title, # change title\n    fill = legend_title, # change legend title\n    caption = \"Source: World Bank Development Indicators\"\n    ) +\n  theme_map() +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n  ) +\n  scale_fill_viridis_c( \n    option = \"magma\", #  chg theme\n    direction = direction # change direction of scale\n    )\n}\n```\n:::\n\n\n### Deploy the function in another document\n\nTo deploy the function in a Quarto or R Markdown dackument, we need to [source](https://bookdown.org/yihui/rmarkdown-cookbook/source-script.html) it as an external R script. First we will save the previous code as a source document. Let's name our file `web-maps.R` and save it in a subdirectory called `functions`. From there, we can use the `source()` function so that we can call our `create_map()` function in subsequent code chunks in our document.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"functions/wb-maps.R\", local = knitr::knit_global())\n```\n:::\n\n\nNow let's call our `create_map()` function that we just made using female labor force particpation. \n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\ncreate_map(var_id = \"SL.TLF.CACT.FE.ZS\", \n           title= \"Female Labor Force Participation\", \n           legend_title = \"FLFP %\", \n           theme = \"inferno\", \n           direction = -1)\n```\n\n::: {.cell-output-display}\n![](module-3.1_files/figure-html/use_function-1.png){width=672}\n:::\n:::\n\n\n\nNow search for an indicator we want to use. We will look for something related to GDP per capita.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_search(\"GDP per capita\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 3\n   indicator_id       indicator                                   indicator_desc\n   <chr>              <chr>                                       <chr>         \n 1 5.51.01.10.gdp     Per capita GDP growth                       GDP per capit…\n 2 6.0.GDPpc_constant GDP per capita, PPP (constant 2011 interna… GDP per capit…\n 3 NV.AGR.PCAP.KD.ZG  Real agricultural GDP per capita growth ra… The growth ra…\n 4 NY.GDP.PCAP.CD     GDP per capita (current US$)                GDP per capit…\n 5 NY.GDP.PCAP.CN     GDP per capita (current LCU)                GDP per capit…\n 6 NY.GDP.PCAP.KD     GDP per capita (constant 2010 US$)          GDP per capit…\n 7 NY.GDP.PCAP.KD.ZG  GDP per capita growth (annual %)            Annual percen…\n 8 NY.GDP.PCAP.KN     GDP per capita (constant LCU)               GDP per capit…\n 9 NY.GDP.PCAP.PP.CD  GDP per capita, PPP (current international… This indicato…\n10 NY.GDP.PCAP.PP.KD  GDP per capita, PPP (constant 2017 interna… GDP per capit…\n# ℹ 14 more rows\n```\n:::\n:::\n\n\nNow let's take that info. and use it to make a plot of GDP per capita. \n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\ncreate_map(var_id = \"NY.GDP.PCAP.PP.KD\", \n           title= \"GDP per capita (constant 2017 internatioal $)\", \n           legend_title = \"Geary-Khamis $\", \n           theme = \"mako\", \n           direction = -1)\n```\n\n::: {.cell-output-display}\n![](module-3.1_files/figure-html/deploy_function-1.png){width=672}\n:::\n:::\n\n\nThere you go! That's how we can build and use a map function to easily map different indicators in our document or web app. \n\n",
    "supporting": [
      "module-3.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}