{
  "hash": "186800f589cac56222df59708306274b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing Data with ggplot2\"\nformat: html\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n\n::: {.callout-tip}\n## Prework\n\n- Install the Tidyverse collection of packages if you have not done so already (see [the previous module](/modules/module-1.3.html))\n- Have a look at the documentation for [ggplot2](https://ggplot2.tidyverse.org/), \n- Familiarize yourself with the `ggplot2` [cheatseet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)\n- Start a new quarto project called \"modules\" and generate a quarto document named \"dataviz.qmd\" inside of it so that you can code along with me\n- Download the data for the bar chart [here](https://github.com/eteitelbaum/data-rich-reports/blob/c55367f1377c2741fcdc3d9a13eb37f7691ce8ae/modules/data/dem_summary.csv). Click the little downnload icon that says \"Download raw file\" when you hover over it and then save it as `dem_summary.csv` in your project folder\n- Download the data for the line chart [here](https://github.com/eteitelbaum/data-rich-reports/blob/c55367f1377c2741fcdc3d9a13eb37f7691ce8ae/modules/data/dem_waves_ctrs.csv) and save as `dem_waves_ctrs.csv` in your project folder\n\nIf you have installed the Tidyverse, then you should already have the packages for this model, including `ggplot2`. You can go ahead and load `ggplot2` along with `readr` and `dplyr`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\nNote that you could also load these three packages by running `library(tidyverse)`. However, it is good to be intentional about which packages we are loading as we are learning them. \n:::\n\n## Overview\n\nLast week we learned how to gather and wrangle data. This week we are going to start visualizing it with the `ggplot2`. We will learn how to make bar charts, histograms, line charts and scatter plots. \n\nAlong the way we are going to be talking about the \"grammar of graphics\" that `ggplot2` is based on. The \"gg\" in ggplot stands for \"grammar of graphics.\" The grammar of graphics is a layered approach to constructing graphs based on a [book](https://link-springer-com.proxygw.wrlc.org/book/10.1007/0-387-28695-0) by Leland Wilkinson.\n\nThe idea is that each visualization you make is going to contain cerain elements. You will start with some data. Then you will incorporate some \"aesthetics\" which you can think of as the dimensions of the visualization (x-axis, y-axis and color, size or shapes for additional dimensions). Next you identify a geometric obejct that you want to use such as a bar, a line or  a point. From there you can customize various elements of the plot like the title and axis scales and labels. \n\n## Bar charts\n\n\n{{< video https://youtu.be/QG1oDJPoIio title = 'Making Bar Charts' >}}\n\n\n\nLet's get started with our first visualization--a basic bar chart. Bar charts are good for comparing data across cases. Our aim here is going to be to summarize levels of democracy across different regions like we did in the last lesson, but this time we will illustrate the differences with a chart. \n\nWe will start by loading the data `dem_summary.csv` file that you downloaded in the prework section. Next we will do our first `ggplot()` call. The `ggplot()` function takes two arguments: `data` and `mapping`. `data` refers to the data frame that includes the variables we want to visualize and `mapping` refers to the aesthetics mappings for the visualization. The aesthetics mappings are themselves presented in a quoting function `aes()` that defines the x and y values of the plot along with other aesthetic values like `fill`, `color` and `linetype`. We will focus on x and y values here and return to these additional aesthetic values later.   \n\nAfter our `ggplot()` call, we can add a series of additional functions to define our visualization following a `+` sign. The most important group are the geoms which will define the basic type of plot we want to make. In this case, we are calling `geom_col()` for our histogram and specifying that the fill color should be \"steelblue.\"\n\nFrom there we will further customize our visualization with the `labs()` function to provide a title, axis labels and a caption.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nggplot(dem_summary, aes(x = region, y = polyarchy)) + # ggplot call\n  geom_col(fill = \"steelblue\") + # we use geom_col() for a a bar chart\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n\n::: {.cell-output-display}\n![](module-1.4_files/figure-html/barchart-1.png){width=672}\n:::\n:::\n\n\nThis looks pretty good but frequently we would want the bars of our bar chart to be sorted in order of the values being displayed. Let's go ahead and add the [reorder()](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/reorder.factor.html) function to our `aes()` call so that we are reordering the bars based on descending values of the average polyarchy score. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n\n::: {.cell-output-display}\n![](module-1.4_files/figure-html/reorder-1.png){width=672}\n:::\n:::\n\n\n## Line charts\n\n{{< video https://youtu.be/PnmQ2MFQpIc title = 'Making Line Charts'>}} \n\nNow let's create a line chart. Line charts are usually the best option when we want to illustrate trends in our data. For this visualization, we will try to illustrate Samuel Huntington's waves of democracy by showing how countries representing each of the three waves. The U.S. represents the first wave, Japan the second wave starting with the allied victory in WWII, and Portugal represents the first country to transition in the third wave. \n\nNext, let's import the `dem_waves_ctrs` CSV file from our project folder and save it in an object of the same name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_waves_ctrs <- read_csv(\"data/dem_waves_ctrs.csv\")\n```\n:::\n\n\n::: {.callout-note}\nThis importing the data from a CSV file represents a slightly different workflow than was used in the line chart video where I downloaded and wrangled the data from the V-Dem API. We will come back to wrangling data later on in the course.\n:::\n\nNext, we are going to do our `ggplot()` call. For the aesthetics mapping, we will put the year on the x-axis and the polyarchy score on the y-axis. We will also specify `color` in the `aes()` call so that we can color the lines by region. \n\nTo get a line chart, we have to specify `geom_line()`. Then within the `geom_line()` function we will set the `linewidth` equal to `1' so that the lines are a bit more visible. \n\nFinally, we will add a `labs()` call as with the previous visualizations. But in addition to title, axis labels and a caption, we will also add `color = \"Country\"` to change the label of the legend to \"Country\" with a capital \"C.\" \n\nLet's run that, save it as an object and then call the object to view the visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# in this ggplot() call, we add a third dimension for line color\nggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +\n  geom_line(linewidth = 1) + # our geom is a line with a width of 1\n  labs(\n    x = \"Year\", \n    y = \"Polyarchy Score\", \n    title = 'Democracy in countries representing three different \"waves\"', \n    caption = \"Source: V-Dem Institute\", \n    color = \"Country\" # make title of legend to upper case\n  )\n```\n\n::: {.cell-output-display}\n![](module-1.4_files/figure-html/linechart-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "module-1.4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}