{
  "hash": "6b1412d1a52c02f6f57a3a01cbc5bc76",
  "result": {
    "markdown": "---\ntitle: \"Module 5.2\"\nsubtitle: \"API Calls and Sliders\"\nformat: html\nhighlight-style: atom-one\nexecute:\n  echo: true\n  message: false\n  warning: false\n---\n\n\n:::{.callout-tip}\n## Prework\n- Review the prework for [module 5.1](https://dataviz-gwu.rocks/modules/module-5.1.html) and make sure that you have everything installed\n- Install [ecm](https://cran.r-project.org/web/packages/ecm/ecm.pdf), which we will use to build our recession shading helper script\n- Install [shinyWidgets](https://dreamrs.github.io/shinyWidgets/) and familiarize yourself with its basic functions\n- We will be using [lubridate](https://lubridate.tidyverse.org/), which is part of the Tidyverse. So it should already be installed; but take some time to familiarize yourself with its basic purpose and functions. \n:::\n\n## Overview\n\n\n\n## App with a reactive API call and date parameters\n\n<iframe src=\"https://emmanuelteitelbaum.shinyapps.io/fred_app/\" width=\"780\" height=\"560\" data-external=\"1\"></iframe>\n\n\n## Setup\n\n{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredr App set up'>}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(shiny)\nlibrary(fredr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Set Fred API key \nfredr_set_key(\"YOUR FRED API KEY\") \n\n# Assign FRED series to objects\ncci <- \"CSCICP03USM665S\" # consumer confidence\nbci <- \"BSCICP03USM665S\" # business confidence\ncli <- \"USALOLITONOSTSAM\" # composite lead indicator\nunemp_rate <- \"UNRATE\" # unemployment rate\ngrowth <- \"A191RL1Q225SBEA\" # growth rate\n\n# set start and end date\nstart_date <- as.Date(\"1970-01-01\")\nend_date <- as.Date(Sys.Date())\n\n# Create list of named values for the input selection\nvars <- c(\"Consumer Confidence\" = cci, \n          \"Business Confidence\" = bci, \n          \"Composite Indicator\" = cli, \n          \"Unemployment Rate\" = unemp_rate,\n          \"Growth Rate\" = growth)\n\n# Load helper script\nsource(\"helper.R\") # scroll down, code pasted below\n```\n:::\n\n\n\n## ui\n\n{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredR App user interface (UI)'>}}\n\nDefine UI for application that draws a line chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"FRED Data App\"),\n    \n    fluidRow(\n      \n      # 12 columns on one row: this panel will take 1/4 of it\n      column(3, wellPanel(\n        selectInput(\"indicator\", \"Indicator:\", vars)\n        ),\n      helpText(\"Select an indicator, choose a date range and view the trend. \n               The grey bars represent economic recessions. \n               The data for this app comes from the St. Louis Fed's \n               FRED database. The consumer confidence, business confidence and \n               lead composite indicators are OECD data downloaded through FRED.\")\n      ), \n      \n      # Remaining 3/4 occupied by plot\n      column(8,\n        plotOutput(\"lineChart\"),     \n        sliderInput(\n          \"range\",\n          \"\",\n          min = my(\"01-1970\"),\n          max = today(), \n          value = c(my(\"01-1970\"), today()), \n          width = \"100%\"\n        )\n      )\n    )\n)\n```\n:::\n\n\n\n## Server\n\n{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredR App Server'>}}\n\nDefine server logic required to draw a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n  \n    # Download data from FRED with reactive function. \n    # Only updates when user selects new indicator\n    fred_indicator <- reactive({\n      fredr(series_id = input$indicator,\n        observation_start = start_date,\n        observation_end = end_date)\n    })\n  \n    # Filter data according to chosen years \n    # Only updates when user selects new data range\n    fred_data <- reactive({\n      fred_indicator() |>\n      filter(date %in% (input$range[1]:input$range[2]))\n   })\n\n    # Render line chart\n    output$lineChart <- renderPlot({\n      \n      # Build plot with ggplot2\n      ggplot(fred_data(), aes(x = date, y = value)) + \n        geom_line(color = \"navyblue\") +\n        labs(\n          x = \"\", \n          y =  names(vars[which(vars == input$indicator)])\n        ) +\n        theme_minimal() +\n        # add recession shading\n        add_rec_shade(st_date = input$range[1], \n                      ed_date = input$range[2], \n                      shade_color = \"darkgrey\",\n                      y_min = min(fred_data()$value),\n                      y_max = max(fred_data()$value))\n    })\n}\n```\n:::\n\n\n\n## Call to Shiny app\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# See above for the definitions of ui and server\nui <- ...\n\nserver <- ...\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\n## Helper script\n\nHelper script for shaded recession rectangles. Save in a file called `helper.R` in same folder as your `app.R` file. See [this post](https://rpubs.com/FSl/609471) for more details. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ecm) # forlagpad\n\n# define add_rec_shade function\nadd_rec_shade<-function(st_date,ed_date,shade_color, y_min, y_max) {\n  \n  # download NBER recession indicators, peak through trough\n  recession<- fredr(series_id = \"USRECD\",\n                    observation_start = st_date,\n                    as.Date(st_date), \n                    observation_end = as.Date(ed_date))\n  \n  #code 1 for 1st day of recession, -1 for 1st day after it ends\n  recession$diff<-recession$value-lagpad(recession$value,k=1)\n  \n  #drop 1st N.A. value\n  recession<-recession[!is.na(recession$diff),] \n  \n  #create vector of recession start dates\n  recession.start<-recession[recession$diff==1,]$date \n  \n  #create vector of recession end dates\n  recession.end<-recession[recession$diff==(-1),]$date \n  \n  # if there are more dates listed in recession.start than recession.end\n  if(length(recession.start)>length(recession.end))\n  # then enter system date for last date in recession.end\n  {recession.end<-c(recession.end,Sys.Date())} \n  \n  # if there are more dates listed in recession.end than recession.start\n  if(length(recession.end)>length(recession.start))       \n  # then enter the earliest date in recession$date as first date in recession.start  \n  {recession.start<-c(min(recession$date),recession.start)} \n  \n  # make a dataframe out of recession.start and recession.end\n  recs<-as.data.frame(cbind(recession.start,recession.end))\n  \n  # convert recession.start into a date\n  recs$recession.start<-as.Date(\n    as.numeric(recs$recession.start),\n    origin=as.Date(\"1970-01-01\")) \n\n  # convert recession.end into a date\n  recs$recession.end<-as.Date(\n    recs$recession.end,\n    origin=as.Date(\"1970-01-01\")) \n  \n  # if the number of rows in recs > 0\n  if(nrow(recs)>0) \n  # draw the rectangle  \n  {rec_shade<-geom_rect(data=recs, \n                         # inherit.aes=F overrides default aesthetics\n                         inherit.aes=F, \n                         aes(xmin=recession.start, \n                         xmax=recession.end, \n                         ymin=y_min, ymax=y_max), \n                         fill=shade_color, alpha=0.5)\n    return(rec_shade)\n  }\n}\n```\n:::\n",
    "supporting": [
      "module-5.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}