---
title: "Data Rich Reports"
subtitle: "Session 2--Coding in R"
footer: "[DRR Website](https://quarto.training)"
logo: images/drr6502-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

# A Bit About R

## What is an Object?

::: incremental
- An object in R is a data structure used to store data
- It can vary from simple scalar types to more complex data structures like vectors, lists, or data frames
- Objects hold not only data but also information about the type of data and the operations that can be performed on them
- Every entity in R is considered an object, making R a language based around the manipulation of objects
:::

## How to Store Data

- In R, you can store data in objects using the assignment operator `<-`
- The object name is on the left of `<-`, and the data or value you wish to assign to the object is on the right
- Then you can print the object to the console using the object name

```{r}
#| label: objects
#| echo: true

# Store the value 42 in the object my_number
my_number <- 42

# Print the value of my_number
my_number 
```

## What Can R Do? 

<br>

::: incremental
- R is a powerful language for data analysis and visualization
- It is also a general-purpose programming language
- It can be used for web development, machine learning, and more
- It is open-source and has a large community of users and developers
:::

## R as a Calculator

<br>

- R can be used as a simple calculator
- You can perform arithmetic operations on numbers

```{r}
#| label: arithmetic
#| echo: true

# Addi a number and store it to a value
sum_of_2plus2 <- 2 + 2


sum_of_2plus2
```

## When to Store Data in Objects

<br>

- Note that you don't always have to store data in objects
- You should mostly store data in objects when you want to use the data later
- If you only need to use the data once, you can just use the data directly

```{r}
#| label: arithmetic2
#| echo: true

# Add two numbers without storing them in an object
2 + 2
```

## Some Common Arithmetic Operators

<br>

- `+` addition
- `-` subtraction
- `*` multiplication
- `/` division
- `^` exponentiation (also `**`)

## Functions

- A function is a set of instructions that produces some output
- In R, you can use built-in functions to perform specific tasks
- For example, you can use the `mean()` function to calculate the average of a set of numbers
- To do this you have to use the combine function `c()` to create a vector of numbers

## 

<br> 

Create a vector of numbers and take the mean...

<br>

```{r}
#| label: mean
#| echo: true

# Create a vector of numbers
numbers <- c(1, 2, 3, 4, 5)

# Calculate the mean of the numbers
mean(numbers)
```

## Some Common Base R Functions {.smaller}

- `mean()` calculates the mean of a set of numbers
- `median()` calculates the median of a set of numbers
- `sd()` calculates the standard deviation of a set of numbers
- `sum()` calculates the sum of a set of numbers
- `length()` calculates the length of a vector
- `max()` and `min()` calculate the maximum and minimum values of a vector
- `round()` rounds a number to a specified number of decimal places
- `sqrt()` calculates the square root of a number
- `log()` calculates the natural logarithm of a number
- `exp()` calculates the exponential of a number
- `abs()` calculates the absolute value of a number

## Your Turn!

<br>

- Start a new code chunk your Quarto document
- Try storing some numbers as a function and printing the result 
- Try using some arithmetic operators
- Try using some of the common base R functions

```{r}
#| label: timer0

library(countdown)
countdown(minutes = 3, 
          id = "timer0", 
          bottom = "10%",
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

## R Packages and Functions {.smaller}

<br>

::: {.incremental}
-   A *function* is a set of instructions
    -   `read_csv()` is a function
    -   `ggplot()` is a function
-   A *package* is a collection of functions
    -   `readr` is a package that contains the `read_csv()` function
    -   `ggplot2` is a package that contains the `ggplot()` function
-   Use `install.packages()` to install packages
-   Use `library()` to load packages
-   You can install packages from CRAN
:::

## Install key packages {.smaller}

-   Install the Tidyverse group of packages from the console
    -   `install.packages("tidyverse")`
-   Install `devtools`
    -   `install.packages("devtools")`
-  Install `vdemdata`
    -   `devtools::install_github("vdeminstitute/vdemdata")`
- Install `leaflet`
    - `install.packages("leaflet")`
-   Install tinytex (for PDF rendering)
    -   Go to your terminal and type `quarto install tinytex`

## Illustration

![](images/install-packages.gif){fig-align="center"}

```{r}
#| label: timer1

countdown(minutes = 3, 
          id = "timer1", 
          top = "0%",
          right = "5%")
```

## The Tidyverse {.smaller}

::: {.incremental}
-   The Tidyverse is a collection of data science packages
-   It is also considered a dialect of R
-   In this class, we will be using many Tidyverse packages
    -   `ggplot2` for data visualization
    -   `readr` for reading data
    -   `dplyr` for data manipulation
    -   `tidyr` for data tidying
    -   Etc.
-   At first we will load the packages independently, e.g. `library(ggplot2)`
-   Later we will load them all at once with `library(tidyverse)`
:::

## Your first data visualization... 

-  Create a code chunk
-  Copy this code chunk into your document

```{r}
#| label: first_data_viz
#| echo: true
#| eval: false
#| 
library(ggplot2)

ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point()
```

-  Try changing echo to `false` 
-  Then render it again

```{r}
#| label: timer2

countdown(minutes = 2, 
          id = "timer2", 
          bottom = "10%",
          right = "10%")
```

## Did it Work?

```{r}
#| label: first_data_viz2

library(ggplot2)

ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point()
```

## Make a map...

```{r}
#| label: leaflet_map2

library(leaflet)
leaflet() %>% 
  addTiles() %>%   # Add default OpenStreetMap map tiles
  addMarkers(lat = 38.90243843683386, lng =  -77.0443814477152, 
             label = "Elliott School of International Affairs")
```

## Make a map...

```{r}
#| label: leaflet_map
#| echo: fenced

library(leaflet)
leaflet() %>% 
  addTiles() %>%   # Add default OpenStreetMap map tiles
  addMarkers(lat = 38.90243843683386, lng =  -77.0443814477152, 
             label = "Elliott School of International Affairs")
```

## Try it yourself! 

-  Create a code chunk
-  Copy this code into the chunk 

```{r}
#| label: leaflet_map3
#| echo: true
#| eval: false

library(leaflet)
leaflet() %>% 
  addTiles() %>%   # Add default OpenStreetMap map tiles
  addMarkers(lat = 38.90243843683386, lng =  -77.0443814477152, 
             label = "Elliott School of International Affairs")
```

- Run the chunk 
- Change the coordinates and run again
- Try rendering the document

```{r}
#| label: timer3

countdown(minutes = 2, 
          id = "timer3", 
          bottom = "10%",
          right = "10%")
```

## The Concept of "Tidy Data"

<br>

- Each column represents a single variable
- Each row represents a single observation
- Each cell represents a single value

## Tidy Data Example

![](images/tidy_data.jpg){fig-align="center"}

## The Concept of "Clean Data"

<br>

- Column names are easy to work with and are not duplicated
- Missing values have been dealt with
- There are no repeated observations or columns
- There are no blank observations or columns
- The data are in the proper format
  - For example dates should be formatted as dates

## Messy Data Example

![](images/messy_wb_data.jpg){fig-align="center" width=70%}

## Which of These is Likely Tidy/Clean?

<br>

- Your boss or a client sends you a file
- Survey data collected by you or someone else 
- You can download it from a website 
- You can scrape it from a website
- A curated collection (e.g. `unvotes`)
- You can access it through an API

## How Do We Get Tidy/Clean Data? 

<br>

- Wrangle it ourselves
- Use a package where it has been wrangled for us
- Download via an API 

## APIs

<br>

- API stands for "Application Programming Interface"
- Way for two computers to talk to each other

```{mermaid}
%%| fig-align: center
%%| fig-width: 7
%% Note: fig-width option not working as of Quarto 1.4, try again in 1.5 

flowchart LR
    Client-->|Request|id1[(API)]
    id1[(API)]-->|Response|Client
    id1[(API)]-->Server
    Server-->id1[(API)]
```

- In our case, we will use APIs to download social science data

## APIs in R

::: {.incremental}
- APIs are accessed through packages in R
- Sometimes there can be more than one package for an API
- Much easier than reading in data from messy flat file!
- We will use just one API in this class:
  - Varieties of Democracy (V-Dem) through `vdemdata`
- But there are many APIs out there (please explore!)
:::

## 

<br>

- Run this code and see what happens. 
- What is `vdem` and what does it do? 

```{r}
#| label: vdemdata1
#| echo: true

# Load packages
library(vdemdata) # to download V-Dem data
library(dplyr)

# Download the data
democracy <- vdem 

# View the data
glimpse(democracy)
```

## `filter()`, `select()`, `mutate()`

<br>

- `filter()` is used to select observations based on their values
- `select()` is used to select variables
- `mutate()` is used to create new variables or modifying existing ones

## `filter()`

- Run this code. What do you see?
- Try changing the year 
- For one year, use `==` instead of `>=`
- Or try `<=` and see what happens 

```{r}
#| label: vdemdata2
#| echo: true

democracy <- vdem |> # download the V-Dem dataset
  filter(year >= 1990) # filter out years less than 1990
  
glimpse(democracy)  
```

```{r}
#| label: timer4
library(countdown)
countdown(minutes = 5, 
          id = "timer4", 
          top = "10%", 
          right = "10%")
```

## `=` versus `==`

<br>

- `=` is used to assign values to variables, just like `<-`
- `==` is used to test if two values are equal to each other
- So `filter(year == 1990)` will give you just the observations for 1990

## `>=` and `<=`

- `>=` is used to test if a value is greater than or equal to another value
- `<=` is used to test if a value is less than or equal to another value
- So `filter(year >= 1990)` will give you the observations for 1990 and later
- And `filter(year <= 1990)` will give you the observations for 1990 and earlier

## `select()`

- Run this code. What do you see?
- Now try `v2x_libdem` instead of `v2x_polyarchy`
- Choose more from the [codebook](https://v-dem.net/documents/24/codebook_v13.pdf) 

```{r}
#| label: vdemdata3
#| echo: true

democracy <- vdem |> # download the V-Dem dataset
  select(                  # select (and rename) these variables
    country = country_name,     # before the = sign is new name  
    vdem_ctry_id = country_id,  # after the = sign is the old name
    year, 
    polyarchy = v2x_polyarchy
  )
  
glimpse(democracy)  
```

```{r}
#| label: timer5
countdown(minutes = 5, 
          id = "timer5",
          top = "0%",
          right = "5%")
```

## `mutate()`

- Modify the code to create new variable that is three times the value of `polyarchy` 
- How about `polyarchy` squared? 

```{r}
#| label: vdemdata4
#| echo: true

democracy <- vdem |> # download the V-Dem dataset
  filter(year == 2015) |> # keep only observations from 2015
  select(                  # select (and rename) these variables
    country = country_name,     # name before the = sign is new name  
    vdem_ctry_id = country_id,  # name after the = sign is old name
    year, 
    polyarchy = v2x_polyarchy 
    ) |>
  mutate(
    polyarchy_dbl = polyarchy * 2 # create variable 2X polyarchy
  )
  
glimpse(democracy)  
```

```{r}
#| label: timer6
countdown(minutes = 5, 
          id = "timer6",
          top = "0%",
          right = "5%")
```

## `vdemdata` Example {.smaller}

```{r}
#| label: vdemdata5
#| output: false
#| echo: true

# Load packages
library(vdemdata) # to download V-Dem data
library(dplyr)

# Download the data
democracy <- vdem |> # download the V-Dem dataset
  filter(year == 2015)  |> # filter year, keep 2015
  select(                  # select (and rename) these variables
    country = country_name,     # the name before the = sign is the new name  
    vdem_ctry_id = country_id,  # the name after the = sign is the old name
    year, 
    polyarchy = v2x_polyarchy, 
    gdp_pc = e_gdppc, 
    region = e_regionpol_6C
    ) |>
  mutate(
    region = case_match(region, # replace the values in region with country names
                     1 ~ "Eastern Europe", 
                     2 ~ "Latin America",  
                     3 ~ "Middle East",   
                     4 ~ "Africa", 
                     5 ~ "The West", 
                     6 ~ "Asia")
  )

# View the data
glimpse(democracy)
```

## 

Use `filter()` to select years...

```{r}
#| label: vdemdata6
#| eval: false
#| echo: true
#| code-line-numbers: "2-3"

# Download the data
democracy <- vdem |> 
  filter(year == 2015)  |> # keep 2015
  select(                 
    country = country_name,       
    vdem_ctry_id = country_id,  
    year, 
    polyarchy = v2x_polyarchy, 
    gdp_pc = e_gdppc, 
    region = e_regionpol_6C
    ) |>
  mutate(
    region = case_match(region,
                     1 ~ "Eastern Europe", 
                     2 ~ "Latin America",  
                     3 ~ "Middle East",   
                     4 ~ "Africa", 
                     5 ~ "The West", 
                     6 ~ "Asia")
  )
```

## 

Use `select()` to choose variables...

```{r}
#| label: vdemdata7
#| eval: false
#| echo: true
#| code-line-numbers: "4-11"

# Download the data
democracy <- vdem |> 
  filter(year == 2015)  |> 
  select(                  # select (and rename) these variables
    country = country_name,     # the name before the = sign is the new name  
    vdem_ctry_id = country_id,  # the name after the = sign is the old name
    year, 
    polyarchy = v2x_polyarchy, 
    gdp_pc = e_gdppc, 
    region = e_regionpol_6C
    ) |>
  mutate(
    region = case_match(region, 
                     1 ~ "Eastern Europe", 
                     2 ~ "Latin America",  
                     3 ~ "Middle East",   
                     4 ~ "Africa", 
                     5 ~ "The West", 
                     6 ~ "Asia")
  )
```

## 

Use `mutate` with `case_match()` to Recode Region....

```{r}
#| label: vdemdata8
#| eval: false
#| echo: true
#| code-line-numbers: "12-23"

# Download the data
democracy <- vdem |>
  filter(year == 2015)  |> 
  select(                  
    country = country_name,     
    vdem_ctry_id = country_id,  
    year, 
    polyarchy = v2x_polyarchy, 
    gdp_pc = e_gdppc, 
    region = e_regionpol_6C
    ) |>
  mutate(
    region = case_match(region, # replace the values in region with country names
                     1 ~ "Eastern Europe", 
                     2 ~ "Latin America",  
                     3 ~ "Middle East",   
                     4 ~ "Africa", 
                     5 ~ "The West", 
                     6 ~ "Asia")
                    # number on the left of the ~ is the V-Dem region code
                    # we are changing the number to the country name on the right
                    # of the equals sign
  )
```




