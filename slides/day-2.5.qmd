---
title: Accessibility and Color Schemes
date: today
date-format: long
footer: "[DataViz 2102 Website](https://dataviz-gwu.rocks)"
logo: images/dataviz-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

```{r}
#| label: setup

library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(wbstats)
library(countrycode)

indicators = c(flfp = "SL.TLF.CACT.FE.ZS", gdp_pc = "NY.GDP.PCAP.KD") # define indicators

## Regional levels of FLFP for column chart 

flfp_gdp_regions <- 
  wb_data("SL.TLF.CACT.FE.ZS", country = "regions_only", mrnev = 1) |> 
  rename(
    region = country,
    year = date,
    flfp = SL.TLF.CACT.FE.ZS
  ) |> 
  select(region, iso3c, year, flfp)
  
## Cross-section of data on FLFP and GDP per capita for scatter plot

flfp_gdp <- wb_data(indicators, end_date = 2021) |> # download data for 2021
    left_join(select(wb_countries(), c(iso3c, region)), by = "iso3c") |>  # add regions
    drop_na() # drop rows with missing values
```

## Color Blindness

<br>

- Color Vision Deficiency (CVD) or color blindness affects 8 percent of men and 1 in 200 women
- There are different types of CVD but most common is red-green color blindness
- Therefore, don't include red and green in the same chart! 
- Look for color blind safe palettes

## Last Week's Line Chart

```{r}
#| label: line_chart

dem_waves_ctrs <- read_csv("https://raw.githubusercontent.com/eteitelbaum/dataviz-fall-2023/main/slides/data/dem_waves_ctrs.csv")

ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## Last Week's Line Chart

Create last week's line chart and save as an object...

```{r}
#| label: line_chart_setup
#| echo: true
#| output: false

dem_waves_ctrs <- read_csv("https://raw.githubusercontent.com/eteitelbaum/dataviz-fall-2023/main/slides/data/dem_waves_ctrs.csv")

dem_waves_chart <- ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```


```{r}
#| label: setup_timer
countdown::countdown(minutes = 2, 
                     id = "setup", 
                     #bottom = "10%", 
                     #right = "10%",
                     color_border = "#fff",
                     color_text = "#fff",
                     color_running_background = "#42affa",
                     color_running_text = "black",
                     color_finished_background = "#E5D19D",
                     color_finished_text = "#00264A")
```

## CVD Plot

```{r}
#| label: cvdPlot_output

library(colorBlindness)

cvdPlot(dem_waves_chart)
```

## CVD Plot

<br> 

Call CVD plot from the `colorBlindness` package. CVD stands for "color vision deficiency." 

```{r}
#| label: cvdPlot_code
#| echo: true
#| output: false

library(colorBlindness)

cvdPlot(dem_waves_chart)
```

## CVD Plot

Click on little image to expand view... 

![](images/expand_view.png)

## Your Turn!

<br>

- Take your `dem_waves_chart` object and run `cvdPlot()` on it
- Expand the window and have a good look
- Which group would have the toughest time reading this graph?

```{r}
#|label: dem_waves_time
countdown::countdown(minutes = 2, 
                     id = "dem_waves", 
                     bottom = "10%", 
                     right = "10%")
```

## Create Your Own Color Scheme

<br>

```{r}
#| label: your_own_palette1

cb_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

flfp_region <- ggplot(flfp_gdp_regions, aes(x = reorder(iso3c, -flfp), y = flfp, fill = region)) +
  geom_col() + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) +
  labs(
    x = "Region", 
    y = "Avg. Female Labor Force Participation", 
    title = "Levels of female labor force participation by region", 
    fill = "Region",
    caption = "Source: World Bank"
    ) 

flfp_region + scale_fill_manual(values = cb_palette)
```


## Create Your Own Color Scheme

<br>

```{r}
#| label: your_own_palette2
#| echo: true
#| output: false

cb_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

flfp_region <- ggplot(flfp_gdp_regions, aes(x = reorder(iso3c, -flfp), y = flfp, fill = region)) +
  geom_col() + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) +
  labs(
    x = "Region", 
    y = "Avg. Female Labor Force Participation", 
    title = "Levels of female labor force participation by region", 
    fill = "Region",
    caption = "Source: World Bank"
    ) 

flfp_region + scale_fill_manual(values = cb_palette)
```

## Create Your Own Color Scheme

<br>

```{r}
#| label: your_own_palette3
#| echo: true
#| output: false
#| code-line-numbers: "1,14"

cb_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

flfp_region <- ggplot(flfp_gdp_regions, aes(x = reorder(iso3c, -flfp), y = flfp, fill = region)) +
  geom_col() + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) +
  labs(
    x = "Region", 
    y = "Avg. Female Labor Force Participation", 
    title = "Levels of female labor force participation by region", 
    fill = "Region",
    caption = "Source: World Bank"
    ) 

flfp_region + scale_fill_manual(values = cb_palette)
```

## Your Turn!

- Go to [Module 2.2](https://dataviz-gwu.rocks/modules/module-2.2) on the course website
- Do the setup steps
- Reproduce the column chart of FLFP with the custom color scheme
- Try changing one of the [hex codes](https://htmlcolorcodes.com/)
- Now run `cvdPlot()` on the plot object to make sure it is color-blind friendly
- Now try a [Barbie theme](https://www.color-hex.com/color-palette/13479) or [GW colors](https://communications.gwu.edu/visual-identity/color-palette)

```{r}
#|label: custom_palette_timer
countdown::countdown(minutes = 10, 
                     id = "dem_waves", 
                     #bottom = "10%", 
                     right = "5%")
```

## Using a Color Palette

<br>

- There are many color palettes 
- Viridis scales look cool and are accessible
- ColorBrewer has many scales some of which are color-blind safe
- The [paletteer](https://emilhvitfeldt.github.io/paletteer/) package aims to be a comprehensive collection of color palettes

## Viridis

```{r}
#| label: viridis1
#| echo: true

flfp_region + scale_fill_viridis_d()
```

## Viridis

```{r}
#| label: viridis2
#| echo: true

flfp_region <-flfp_region + scale_fill_viridis_d()
cvdPlot(flfp_region)
```

## ColorBrewer

```{r}
#| label: color_brewer1
#| echo: true

flfp_region + scale_fill_brewer(palette = "YlGn")
```

## ColorBrewer

```{r}
#| label: color_brewer2
#| echo: true

flfp_region <- flfp_region + scale_fill_brewer(palette = "YlGn")
cvdPlot(flfp_region)
```

## Paletteer

```{r}
#| label: paletteer1
#| echo: true

library(paletteer)

flfp_region + scale_fill_paletteer_d("rcartocolor::Temps")
```

## Paletteer

Not all palettes are color-blind safe... 

```{r}
#| label: paletteer2
#| echo: true

flfp_region <- flfp_region + scale_fill_paletteer_d("rcartocolor::Temps")
cvdPlot(flfp_region)
```

## Paletteer

```{r}
#| label: Paletteer3
#| echo: true

library(paletteer)

flfp_region + scale_fill_paletteer_d("beyonce::X1") 
```









And some many not have enough colors for your chart...

```{r}
#| label: paletteer4
#| echo: true

flfp_region +  scale_fill_paletteer_d("beyonce::X1")
```

## Your Turn

- Try one of the color palettes packages we just discussed
- Google the reference documents for details on schemes
- For paletteer, check out this [paletteer gallery](https://pmassicotte.github.io/paletteer_gallery/)
- For ColorBrewer, check out this [selector tool](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)
- A full list of viridis schemes is [here](https://search.r-project.org/CRAN/refmans/viridisLite/html/viridis.html)

```{r}
#|label: palette_package_timer
countdown::countdown(minutes = 10, 
                     id = "palette_package", 
                     #bottom = "10%", 
                     right = "5%")
```


## Scaling for Scatter Plots

```{r}
#| label: scatterplot1
wealth_flfp <- ggplot(flfp_gdp, aes(x = gdp_pc, y = flfp)) + 
  geom_point(aes(color = region)) + # color points by region
  geom_smooth(method = "loess", linewidth = 1) +  # make the line a loess curve
  scale_x_log10(labels = scales::label_dollar()) + # stretch axis, add '$' format
  scale_y_continuous(labels = scales::label_percent(scale = 1)) + # add % label
  labs(
    x= "GDP per Capita", # x-axis title
    y = "Female Labor Force Participation", # y-axis title
    title = "Wealth and female labor force participation", # plot title
    caption = "Source: World Bank Development Indicators", # caption
    color = "Region" # legend title
    )

wealth_flfp + scale_color_viridis_d(option = "plasma")
```

## Scaling for Scatter Plots

Use `scale_color_viridis_d` instead of `scale_fill_viridis_d`. 

```{r}
#| label: scatterplot2
#| echo: true
#| output: false
#| code-line-numbers: "13"
wealth_flfp <- ggplot(flfp_gdp, aes(x = gdp_pc, y = flfp)) + 
  geom_point(aes(color = region)) + # color points by region
  geom_smooth(method = "loess", linewidth = 1) +  # make the line a loess curve
  scale_x_log10(labels = scales::label_dollar()) + # stretch axis, add '$' format
  scale_y_continuous(labels = scales::label_percent(scale = 1)) + # add % label
  labs(
    x= "GDP per Capita", # x-axis title
    y = "Female Labor Force Participation", # y-axis title
    title = "Wealth and female labor force participation", # plot title
    caption = "Source: World Bank Development Indicators", # caption
    color = "Region" # legend title
    )

wealth_flfp + scale_color_viridis_d(option = "plasma")
```

## Scaling for Scatter Plots

Use the `end` argument to darken the colors

```{r}
#| echo: true

wealth_flfp + scale_color_viridis_d(option = "plasma", end = .7)
```

## Scaling for Scatter Plots

Use the `direction` argument to flip the color scale... 

```{r}
#| echo: true 

wealth_flfp + scale_color_viridis_d(option = "plasma", direction = -1)
```

## Your Turn! 

- Try using one of the color schemes on a scatter plot
- Use `scale_color_` instead of `scale_fill_`
- Play around with `end` and `direction` arguments in `viridis`

```{r}
#|label: scatter_plot_timer
countdown::countdown(minutes = 10, 
                     id = "scatter_plot", 
                     bottom = "10%", 
                     right = "5%")
```




