---
title: "Module 3.2"
subtitle: "Leaflet Maps"
format: 
  html:
    code-link: true
highlight-style: atom-one
execute:
  echo: true
  message: false
  warning: false
---

::: {.callout-tip}
## Prework

- Install [states](https://www.andybeger.com/states/index.html),
[leaflet](http://rstudio.github.io/leaflet/), [sf](https://r-spatial.github.io/sf/) and [html tools](https://rstudio.github.io/htmltools/) and have a look at the documentation for each.
- Have a look at the [leaflet](https://posit.co/wp-content/uploads/2022/10/leaflet.pdf) and [sf](https://posit.co/wp-content/uploads/2022/10/sf.pdf) cheatsheets. 

`install.packages(c("states", "leaflet", "sf", "htmltools))`
:::

## Overview

This module is going to introduce you to how to make maps with markers and pop-ups using leaflet. *Markers* are icons or symbols that show where something is located. *Pop-ups* are fields that display information about a location on a map. Together, pop-ups and markers allow you to show information related to a particular point or feature on a map without having to navigate away from the current view.

Markers and pop-ups can be used to display information such as an address or the name of a city or town. You can customize how pop-ups look, choose what data to display in them. As you get more advanced, you can do even more cool things like link them to other pages or external websites. 

## Working with UCDP data

{{< video https://youtu.be/If2PwFv90iI title = 'Working with UCDP data' >}}

Our running example in this module is going to involve mapping conflict events for Yemen from the Uppsala Conflict Data Program UCDP. So while we will be building on some of our earlier knowledge, this module is going to depart a bit from previous ones in that we are using an entirely new dataset. Specifically, we will be using the UCDP georeferenced event dataset, which you can download from [here](https://ucdp.uu.se/). 

After you have downloaded the data and saved it in your modules folder, go ahead and, read it in and have a look at its contents with `gplimpse()`. 

::: {.callout-note}
I am working with a truncated version of the UCDP GED data so that I can upload everything to GitHub. Consequently, my `glimpse()` output may look slightly different from yours if you are using the full data. 
:::

```{r}
#| label: read_ged_data
library(readr)
library(dplyr)

ged_data <- read_csv("data/GEDEvent_v22_1.csv")

glimpse(ged_data)
```

One thing we have to manage right away is the specific country codes used in these data. There is a whole [art](http://svmiller.com/blog/2021/01/a-tutorial-on-state-classification-systems/) to managing international standards organization (ISO) codes which we have already touched on in our discussion of the `countrycodes` package. For the pruposes of this course, it is enough to be aware of the fact that country-level data sets use different coding systems and that this poses a small hurdle to the visualization and analysis of country-level data.  

For this analysis, we are going to want to filter by country and specifically we want conflict data for Yemen. According to the [UCDP codebook](https://ucdp.uu.se/downloads/ged/ged221.pdf), this dataset uses Gleditsch-Ward (GW) country identifiers. One option could be to simply look up the GW country code for Yemen. But there is also a nice package developed called [states](https://www.andybeger.com/states/index.html). It has a function called `sfind()` that we can use to find the relevant country code. 

```{r}
#| label: get_yemen_ccode
library(states)

sfind("Yemen")[1:6]
```

Here we see that the GW code for Yemen is 678. Although there are many listings for Yemen, we know that it is the right code because the Arab Republic of Yemen (our other option for a GW Yemen code) ceased to exist in 1990 following its unification with the People's Democratic Republic of Yemen. 

Let's go ahead and use our newly discovered country code to wrangle some data for Yemen. We will filter for Yemen's country ID and events from 2021 and, to keep things manageable, we will only include events that started before March 1 2021. 

Looking again at the codebook, we see there are codings for how certain the coders were regarding where an event occurred and that they also coded for the quality of the reporting. We will keep events with a location precision score less than 3 and an event clarity score equal to 1. 

From there we will create a new variable `deaths` that sums the different categories of deaths (side a, side b, civilian and unknown). Then we will select all of these variables and the location coordinates and use the `st_as_sf()` function from the `sf` package to conver the coordinates into simple features objects. 

```{r}
#| label: wrangling

ged_yemen <- ged_data |> 
  filter(
    country_id == 678, #gw country code
    year == 2021,
    date_start < "2021-03-01", 
    where_prec < 3, # keep if certain where event occurred
    event_clarity == 1, # keep if event reporting is clear
      ) |> 
  mutate(deaths = deaths_a + deaths_b + deaths_civilians + deaths_unknown) |>
  select(event_id = id,
         country_id,
         date = date_start,
         gov_deaths = deaths_a, 
         rebel_deaths = deaths_b, 
         civilian_deaths = deaths_civilians, 
         deaths, 
         place = where_coordinates,
         latitude, 
         longitude) |>
  sf::st_as_sf(coords = c("longitude", "latitude")) 

glimpse(ged_yemen)
```

## Make a leaflet map

{{< video https://youtu.be/hHUPqgHRqYU title = 'Plot conlfict' >}}

Now that we have our data, let's make our first pop-up map. To do this we are going to be using the [leaflet](https://rstudio.github.io/leaflet/) package. Leaflet is a really popular JavaScript library for interactive maps. To get started with leaflet, we'll make a really simple map with one marker that says "First conflict event." 

### Plot a single marker

Let's start with a really simple hypothetical example. Let's say we want to plot one conflict event that we have the coordinates for and label it "First conflict event." To do this, we would first call the `leaflet()`function. From there will add default street map tiles with `addTiles()` and then our single pop-up marker with `addMarkers()`.  

```{r}
#| label: plot_marker
library(leaflet)

leaflet() |>
  addTiles() |>  # Add default OpenStreetMap map tiles
  addMarkers(lng = 45.46916, lat = 14.14912, label = "First conflict event")
```

### Plot some conflict events from Yemen

Now that you have the hang of it, we can move on to plotting some conflict events from our data frame. Again we will call `leaflet()` but this time we will add `data = ged_yemen` as an argument. We will also use `setView()` to center the map on Yemen's capital Sana'a. We include two arguments for `addMarkers`. `popup = ~as.character(deaths)` displays the number of deaths when the user clicks on the marker and `label = ~place` displays the name of the town that the coordinates correspond to.  

::: {.callout-note}
Note that arguments for the `popup =` argument take the form of a one-sided formula, meaning that they require a tilde (~) as a prefix. Scroll to the bottom of [this page](http://rstudio.github.io/leaflet/map_widget.html) for a more detailed explanation of the ~ notation in this context. 
:::

```{r}
#| label: plot_events
leaflet(data = ged_yemen) |> # map points in ged_yemen data frame
  addTiles() |> # add default tile
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addMarkers(
    popup = ~as.character(deaths), # when user clicks, show deaths
    label = ~place # when user hovers, show town
    )
```

## Customize your leaflet map

{{< video https://youtu.be/qLYeSsoDvgs title = 'Customize your leaflet plot' >}}

Next, let's do some customization to make our map look amazing. We will talk about changing the icon style, customized the information displayed in the icon and adding base maps.  

### Use an awesome icon

We can dress our leaflet map up a little bit with the `addAwesomeMarkers()` function which allows us to use the [glyphicons](https://getbootstrap.com/docs/3.3/components/), [font awesome](https://fontawesome.com/search?q=location&o=r&m=free) and [ionicons](https://ionic.io/ionicons) libraries. 

First we will use `awesomeIcons()` to store the icon we want to use. Here we choose "ios-close" from the ionic library. We will say that we want the icon colorto be black and the surrounding marker color to be red. Then we call `addAwesomeMarkers()` and specify `icon = icon` to call the red and black ionic marker.  

```{r}
#| label: use_awesome_icon
# save icon
icon <- awesomeIcons(
  icon = "ios-close",
  iconColor = "black",
  markerColor = "red", 
  library = "ion" 
)

# Build map
leaflet(data = ged_yemen) |>   
  addTiles() |> 
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~as.character(deaths), 
    label = ~place
    )
```

### Change content of the popup

Let's say we want to add more information to our pop-up when the user clicks on it. Instead of just showing the total number of deaths, we also want to show the date of the event and the breakdown of government deaths, rebel deaths and civilian deaths.

The easiest way to do this is going to be to add a column to our data frame with a label associated with each event. We will use the base R `sprintf()` function combined with `htmltools` to create these labels. `sprintf()` returns a formatted string using values in a list. The first parameter in `sprintf` is the format and the second is the values that go into the format. 

In this example, we are separating the lines of our label with html (<br>) and we are passing in a string (%s) for the date and numeric values (%.0f) for the number of deaths. 

Then we call `HMTL` from `htmltools` and use [lapply()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/lapply) to apply the function to every line in the data frame.  

```{r}
#| label: custom_markers
ged_yemen$popup_text <- sprintf(
      "Date: %s <br> 
       Total Deaths: %.0f <br> 
       Govt. Deaths: %.0f <br> 
       Rebel Deaths: %.0f <br> 
       Civilian Death: %.0f <br>",
      ged_yemen$date, 
      ged_yemen$deaths, 
      ged_yemen$gov_deaths, 
      ged_yemen$rebel_deaths,
      ged_yemen$civilian_deaths
    ) |> lapply(htmltools::HTML)
```

Now we can use the new labels to enhance the markers by specifying `popup = ~popup_text` in the `addAwesomeMarkers()` function.  

```{r}
#| label: map_custom_markers
leaflet(data = ged_yemen) |>  
  addTiles() |> 
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~popup_text, 
    label = ~place
    )
```

Now let's spot check the labels. 

```{r}
#| label: spotcheck_labels
ged_yemen |>
  filter(place == "Marib Dam")
```

### Using basemaps

As a last step, let's change the basemap. We can do this by specifying `addProviderTiles()` instead of `addTiles()` and specifying the basemap that we want to use. Here is a list of [available basemaps](http://leaflet-extras.github.io/leaflet-providers/preview/index.html). For this example, we are going to use "OpenTopoMap." 

```{r}
#| label: use_basemap
leaflet(data = ged_yemen) |> # Jan and Feb  
  addProviderTiles("OpenTopoMap") |> # include name of provider here
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~popup_text, 
    label = ~place
    )
```

Now we can see a bit more about the topography, which could be super-useful for conflict analysis. 

