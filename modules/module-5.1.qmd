---
title: "Module 5.1"
subtitle: "Your First Shiny App"
format: html
highlight-style: atom-one
execute:
  echo: true
  message: false
  warning: false
---

:::{.callout-tip}
- Get a [FRED API key](https://fred.stlouisfed.org/docs/api/api_key.html)
- Install [fredr](https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html) and read about its basic usage
- Install [shiny](https://shiny.posit.co/) and read about the 
:::

## Overview



## Scatter plot app

<iframe src="https://emmanuelteitelbaum.shinyapps.io/scatterplot/" width="1050" height="700" data-external="1"></iframe>

## Setup 

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'View regression results with broom'>}}

Say something about how to set up an app.R script. 

```{r}
#| label: setup
#| eval: false

# load packages
library(shiny)
library(readr)
library(ggplot2)

# read in data, create a vector of variable names
dem_data <- read_csv("dem_data.csv")

# create list of named values for the input selection
vars <- c("Democracy" = "polyarchy",
          "Clientelism" = "clientelism",
          "Corruption" = "corruption",
          "Women's Empowerment" = "womens_emp",
          "Wealth" = "gdp_pc",
          "Infant Mortality" = "inf_mort",
          "Life Expectancy" = "life_exp", 
          "Education" = "education")
```


## ui 

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'View regression results with broom'>}}

```{r}
#| label: ui
#| eval: false

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Democracy and Development"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
      sidebarPanel(
        selectInput('xcol', 'X Variable', vars),
        selectInput('ycol', 'Y Variable', vars, selected = vars[[6]])
      ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("scatterplot")
        )
    )
)

```


## Server

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'View regression results with broom'>}}

```{r}
#| label: server
#| eval: false

# Define server logic required to draw a scatter plot
server <- function(input, output, session) {
  
  # Render the plot
  output$scatterplot <- renderPlot({
    
    # Combine the selected variables into a new data frame
    selectedData <- dem_data[, c(input$xcol, input$ycol, "region")]
    
    # ggplot call
    ggplot(selectedData(), aes_string(x = input$xcol, y = input$ycol)) +
      geom_point(aes(color = region)) +
      geom_smooth(method = "loess") +
      scale_color_viridis_d(option = "plasma") +
      theme_minimal() +
      labs(
        x =  names(vars[which(vars == input$xcol)]),
        y =  names(vars[which(vars == input$ycol)]),
        caption = "Source: V-Dem Institute", # caption
        color = "Region" # legend title
      )
  })
}
```

## Call to Shiny app

```{r}
#| label: call_shiny
#| eval: false

# See above for the definitions of ui and server
ui <- ...

server <- ...

# Run the application 
shinyApp(ui = ui, server = server)
```



