---
title: "Module 5.2"
subtitle: "API Calls and Sliders"
format: html
highlight-style: atom-one
execute:
  echo: true
  message: false
  warning: false
---

:::{.callout-tip}
## Prework
- Get a [FRED API key](https://fred.stlouisfed.org/docs/api/api_key.html)
- Install [fredr](https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html) and read about its basic usage
- Install [ecm](https://cran.r-project.org/web/packages/ecm/ecm.pdf), which we will use to build our recession shading helper script
- Install [shinyWidgets](https://dreamrs.github.io/shinyWidgets/) and familiarize yourself with its basic functions
- We will be using [lubridate](https://lubridate.tidyverse.org/), which is part of the Tidyverse. So it should already be installed; but take some time to familiarize yourself with its basic purpose and functions. 
:::

## Overview



## App with a reactive API call and date parameters

<iframe src="https://emmanuelteitelbaum.shinyapps.io/fred_app/" width="780" height="560" data-external="1"></iframe>


## Setup

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredr App set up'>}}

```{r}
#| label: setup
#| eval: false

# Load packages
library(shiny)
library(fredr)
library(dplyr)
library(ggplot2)
library(lubridate)

# Set Fred API key 
fredr_set_key("YOUR FRED API KEY") 

# Assign FRED series to objects
cci <- "CSCICP03USM665S" # consumer confidence
bci <- "BSCICP03USM665S" # business confidence
cli <- "USALOLITONOSTSAM" # composite lead indicator
unemp_rate <- "UNRATE" # unemployment rate
growth <- "A191RL1Q225SBEA" # growth rate

# set start and end date
start_date <- as.Date("1970-01-01")
end_date <- as.Date(Sys.Date())

# Create list of named values for the input selection
vars <- c("Consumer Confidence" = cci, 
          "Business Confidence" = bci, 
          "Composite Indicator" = cli, 
          "Unemployment Rate" = unemp_rate,
          "Growth Rate" = growth)

# Load helper script
source("helper.R") # scroll down, code pasted below
```


## ui

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredR App user interface (UI)'>}}

Define UI for application that draws a line chart

```{r}
#| label: ui
#| eval: false 

ui <- fluidPage(

    # Application title
    titlePanel("FRED Data App"),
    
    fluidRow(
      
      # 12 columns on one row: this panel will take 1/4 of it
      column(3, wellPanel(
        selectInput("indicator", "Indicator:", vars)
        ),
      helpText("Select an indicator, choose a date range and view the trend. 
               The grey bars represent economic recessions. 
               The data for this app comes from the St. Louis Fed's 
               FRED database. The consumer confidence, business confidence and 
               lead composite indicators are OECD data downloaded through FRED.")
      ), 
      
      # Remaining 3/4 occupied by plot
      column(8,
        plotOutput("lineChart"),     
        sliderInput(
          "range",
          "",
          min = my("01-1970"),
          max = today(), 
          value = c(my("01-1970"), today()), 
          width = "100%"
        )
      )
    )
)
```


## Server

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'fredR App Server'>}}

Define server logic required to draw a histogram.

```{r}
#| label: server
#| eval: false

server <- function(input, output) {
  
    # Download data from FRED with reactive function. 
    # Only updates when user selects new indicator
    fred_indicator <- reactive({
      fredr(series_id = input$indicator,
        observation_start = start_date,
        observation_end = end_date)
    })
  
    # Filter data according to chosen years 
    # Only updates when user selects new data range
    fred_data <- reactive({
      fred_indicator() |>
      filter(date %in% (input$range[1]:input$range[2]))
   })

    # Render line chart
    output$lineChart <- renderPlot({
      
      # Build plot with ggplot2
      ggplot(fred_data(), aes(x = date, y = value)) + 
        geom_line(color = "navyblue") +
        labs(
          x = "", 
          y =  names(vars[which(vars == input$indicator)])
        ) +
        theme_minimal() +
        # add recession shading
        add_rec_shade(st_date = input$range[1], 
                      ed_date = input$range[2], 
                      shade_color = "darkgrey",
                      y_min = min(fred_data()$value),
                      y_max = max(fred_data()$value))
    })
}
```


## Call to Shiny app

```{r}
#| label: call_shiny
#| eval: false

# See above for the definitions of ui and server
ui <- ...

server <- ...

# Run the application 
shinyApp(ui = ui, server = server)
```


## Helper script

Helper script for shaded recession rectangles. Save in a file called `helper.R` in same folder as your `app.R` file. See [this post](https://rpubs.com/FSl/609471) for more details. 

```{r}
#| label: helper_script
#| eval: false

library(ecm) # forlagpad

# define add_rec_shade function
add_rec_shade<-function(st_date,ed_date,shade_color, y_min, y_max) {
  
  # download NBER recession indicators, peak through trough
  recession<- fredr(series_id = "USRECD",
                    observation_start = st_date,
                    as.Date(st_date), 
                    observation_end = as.Date(ed_date))
  
  #code 1 for 1st day of recession, -1 for 1st day after it ends
  recession$diff<-recession$value-lagpad(recession$value,k=1)
  
  #drop 1st N.A. value
  recession<-recession[!is.na(recession$diff),] 
  
  #create vector of recession start dates
  recession.start<-recession[recession$diff==1,]$date 
  
  #create vector of recession end dates
  recession.end<-recession[recession$diff==(-1),]$date 
  
  # if there are more dates listed in recession.start than recession.end
  if(length(recession.start)>length(recession.end))
  # then enter system date for last date in recession.end
  {recession.end<-c(recession.end,Sys.Date())} 
  
  # if there are more dates listed in recession.end than recession.start
  if(length(recession.end)>length(recession.start))       
  # then enter the earliest date in recession$date as first date in recession.start  
  {recession.start<-c(min(recession$date),recession.start)} 
  
  # make a dataframe out of recession.start and recession.end
  recs<-as.data.frame(cbind(recession.start,recession.end))
  
  # convert recession.start into a date
  recs$recession.start<-as.Date(
    as.numeric(recs$recession.start),
    origin=as.Date("1970-01-01")) 

  # convert recession.end into a date
  recs$recession.end<-as.Date(
    recs$recession.end,
    origin=as.Date("1970-01-01")) 
  
  # if the number of rows in recs > 0
  if(nrow(recs)>0) 
  # draw the rectangle  
  {rec_shade<-geom_rect(data=recs, 
                         # inherit.aes=F overrides default aesthetics
                         inherit.aes=F, 
                         aes(xmin=recession.start, 
                         xmax=recession.end, 
                         ymin=y_min, ymax=y_max), 
                         fill=shade_color, alpha=0.5)
    return(rec_shade)
  }
}
```

