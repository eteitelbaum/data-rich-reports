---
title: "Module 2.2"
subtitle: "Accessibility, Clarity and Interactivity"
format: html
highlight-style: atom-one
execute:
  echo: true
  message: false
  warning: false
---

::: {.callout-tip}
## Prework

- Install plotly (`install.packages("plotly")`) and have a look at the [documentation](https://plotly.com/ggplot2/getting-started/#plotly-for-r)
- Install (colorBlindness Guide) `install.packages("colorBlindness")` and read this [vignette](https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html)
- Generate a quarto document named "module-2.2.qmd" in your "modules" project folder so that you can code along with me
- In your quarto document, run these code chunks and familiarize yourself the data frames that they generate 

```{r}
#| label: setup

library(readr)
library(dplyr)
library(ggplot2)
library(wbstats)
library(countrycode)

indicators = c(flfp = "SL.TLF.CACT.FE.ZS", gdp_pc = "NY.GDP.PCAP.KD") # define indicators

## Regional levels of FLFP for column chart 

flfp_gdp_regions <- 
  wb_data("SL.TLF.CACT.FE.ZS", country = "regions_only", mrnev = 1) |> 
  rename(
    region = country,
    year = date,
    flfp = SL.TLF.CACT.FE.ZS
  ) |> 
  select(region, iso3c, year, flfp)
  
flfp_gdp_regions

## Cross-section of data on FLFP and GDP per capita for scatter plot

flfp_gdp <- wb_data(indicators, mrnev = 1) |> # download most recent non-missing value of indicators
    left_join(select(wb_countries(), c(iso3c, region)), by = "iso3c")  # add regions from countrycode()

glimpse(flfp_gdp)

## Time series data on regional trends in FLFP for line chart

flfp_ts <- wb_data("SL.TLF.CACT.FE.ZS", country = "regions_only", start_date = 1990, end_date = 2022) |> 
  rename(
    region = country,
    year = date,
    flfp = SL.TLF.CACT.FE.ZS
  ) |> 
  select(region, iso3c, year, flfp)
  
glimpse(flfp_ts)
```
:::

## Overview

In this lesson we are going to take our visualizations from Module 2.1 and improve them. In the first part of the lesson we are going to focused on how to make your visualizations accessible to a color-blind audience. Then we will discuss how to improve the look of your visualizations with themes and to provide additional information and context with annotations. Finally, we will spend some time talking about how to make your graphs interactive so that users can explore them in a more dynamic and flexible way. 

## Color Schemes

{{< video https://www.youtube.com/embed/wo9vZccmqwc title = 'Accessible Color Schemes'>}}

There are a number of different [types](https://www.nei.nih.gov/learn-about-eye-health/eye-conditions-and-diseases/color-blindness/types-color-blindness) of color blindness, but the most common type is red-green color blindness. 

[accessible](https://towardsdatascience.com/is-your-color-palette-stopping-you-from-reaching-your-goals-bf3b32d2ac49) to a color-blind

Here mention the accessibility checker tools in Windows? Use line chart we did in module 2.1 as an example. At the end of the lesson, ask students to fix it as an exercise. 

```{r}
#| label: dem_waves
dem_waves_ctrs <- read_csv("data/dem_waves_ctrs.csv")

dem_waves_chart <- ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + 
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country"
  )

dem_waves_chart
```

[colorBlindness Guide](https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html)

```{r}
#| label: dem_waves_cvd
#| fig-width: 12
#| fig-height: 7
library(colorBlindness)

cvdPlot(dem_waves_chart)
```


### Create your own colorblind friendly color scheme

[](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)
[scale_color_manual()](https://ggplot2.tidyverse.org/reference/scale_manual.html)


```{r}
#| label: flfp_region
cb_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

flfp_region <- ggplot(flfp_gdp_regions, aes(x = reorder(iso3c, -flfp), y = flfp, fill = region)) +
  geom_col() + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) +
  labs(
    x = "Region", 
    y = "Avg. Female Labor Force Participation", 
    title = "Levels of female labor force participation by region", 
    fill = "Region",
    caption = "Source: World Bank"
    ) 

flfp_region + scale_fill_manual(values = cb_palette)
```

```{r}
#| label: flfp_region_cvd
#| fig-width: 12
#| fig-height: 7
flfp_region <- flfp_region + scale_fill_manual(values = cb_palette)

cvdPlot(flfp_region)
```


### Use Viridis

[viridis()](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)


```{r}
#| label: viridis
flfp_region + scale_fill_viridis_d()
```

```{r}
#| label: viridis_cvd
#| fig-width: 12
#| fig-height: 7
flfp_region <- flfp_region + scale_fill_viridis_d()

cvdPlot(flfp_region)
```


### Use R color brewer

[color brewer](https://ggplot2.tidyverse.org/reference/scale_brewer.html)
[palette selector tool](https://colorbrewer2.org/)


Show how it works with YlGn but does not work with with BlGn

```{r}
#| label: brewer
flfp_region + scale_fill_brewer(palette = "YlGn") # try with BrBG
```

```{r}
#| label: brewer_cvd
#| fig-width: 12
#| fig-height: 7
flfp_region <- flfp_region + scale_fill_brewer(palette = "YlGn")

cvdPlot(flfp_region)
```


### Scaling for scatterplots and line charts

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

Use "scale_color" instead of "scale_fill" for line charts and scatter plots, e.g. `scale_color_manual()`, `scale_color_viridis_d()`, `scale_color_brewer`.  

```{r}
#| label: scale_color_viridis()  
wealth_flfp <- ggplot(flfp_gdp, aes(x = gdp_pc, y = flfp)) + # plot gdp_pc vs flfp, store in wealth_flfp 
  geom_point(aes(color = region)) + # add an aesthetic to color points by region
  geom_smooth(method = "loess", linewidth = 1) +  # make the line a loess curve
  scale_x_log10(labels = scales::label_dollar()) + # stretch x- axis, add '$' format
  scale_y_continuous(labels = scales::label_percent(scale = 1)) + # add % label to y-axis
  labs(
    x= "GDP per Capita", # x-axis title
    y = "Female Labor Force Participation", # y-axis title
    title = "Wealth and female labor force participation", # plot title
    caption = "Source: World Bank Development Indicators", # caption
    color = "Region" # legend title
    )

wealth_flfp + scale_color_viridis_d(option = "plasma")
```



```{r}
#| label: scale_color_brewer()
flfp_line <- ggplot(flfp_ts, aes(x = year, y = flfp, color = region)) +
  geom_line(linewidth = 1) + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) +
  labs(
    x = "Year", 
    y = "Female Labor Force Participation", 
    title = "Regional trends in female labor force participation", 
    caption = "Source: V-Dem Institute", 
    color = "Country"
  )

flfp_line + scale_color_brewer(palette = "YlOrRd")
```

## Themes

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

[ggplot themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)


```{r}
#| label: theme_dark()
wealth_flfp + scale_color_viridis_d(option = "plasma") + theme_dark()
```

```{r}
#| label: theme_minimal()
flfp_region + scale_fill_brewer(palette = "YlGn") + theme_minimal()
```

## Annotations

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

```{r}
#| label: annotate1
wealth_flfp <- wealth_flfp + scale_color_viridis_d(option = "plasma") + theme_minimal()

wealth_flfp + annotate("text", x = 90000, y = 75, label = "Wealthy") + 
  annotate("text", x = 1000, y = 80, label = "Low income") +
  annotate("text", x = 10000, y = 20, label = "Middle income")
```


```{r}
#| label: annotate2
flfp_line <- flfp_line + scale_color_viridis_d() 

flfp_line + geom_hline(yintercept=52, linetype="dashed", color = "red", size = 1) +
  annotate("text", x = 1995, y = 55, label = "Global average")
```


```{r}
#| label: annotate3
flfp_line <- flfp_line + scale_color_viridis_d() 

flfp_line + geom_vline(xintercept=2020, linetype = "dashed", size = 1) +
  annotate("text", x = 2017, y = 35, label = "Pandemic")
```


## Interactivity

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

[plotly](https://plotly.com/r/)
[ggplotly](https://plotly.com/ggplot2/)

```{r}
#| label: plotly
library(plotly)

ggplotly(flfp_line)
```


In this next one, if you don't control the tool tip it looks bad

```{r}
#| label: tooltip
flfp_region <- flfp_region + scale_fill_brewer(palette = "YlGn") + theme_minimal()

ggplotly(flfp_region, tooltip = c("region", "flfp")) # controlling the tooltip output
```

need to include `aes(label = country)` to view country in tool tip. How to add notes and other stuff with `layout(annotations = list())`. 

```{r}
#| label: plotly_scatterplot
library(plotly)

wealth_flfp <- ggplot(flfp_gdp, aes(x = gdp_pc, y = flfp)) + 
  geom_point(aes(color = region)) + 
  geom_smooth(method = "loess", linewidth = 1) +  
  scale_x_log10(labels = scales::label_dollar()) + 
  scale_y_continuous(labels = scales::label_percent(scale = 1)) + 
  labs(
    x= "GDP per Capita", 
    y = "Female Labor Force Participation", 
    title = "Wealth and female labor force participation", 
    caption = "Source: World Bank Development Indicators", # will not show up!
    color = "Region" 
    ) + 
  scale_color_viridis_d(option = "plasma") +
  theme_minimal() +
  aes(label = country)  # need so ggplot retains label for plotly

ggplotly(wealth_flfp, tooltip = c("country", "flfp", "gdp_pc")) |> 
  
  layout(annotations = list(text = "Source: World Bank Development Indicators",  
                            font = list(size = 10), showarrow = FALSE,
                            xref = 'paper', x = 1.1, xanchor = 'right', xshift = 0,
                            yref = 'paper', y = -.1, yanchor = 'auto', yshift = 0)) |> 
  # add web address
  layout(annotations = list(text = "www.dataviz-gwu.rocks", 
                            font = list(size = 10, color = 'grey'), showarrow = FALSE,
                            xref = 'paper', x = .5, xanchor = 'center', xshift = 0,
                            yref = 'paper', y = 1, yanchor = 'top', yshift = 0))
```



