---
title: "Module 4.2"
subtitle: "Regression Tables and Coefficient Plots"
format: 
  html:
    code-link: true
highlight-style: atom-one
execute:
  echo: true
  message: false
  warning: false
---

::: callout-tip
## Prework

-   Install [peacesciencer](http://svmiller.com/peacesciencer/), [broom](https://cran.r-project.org/web/packages/broom/vignettes/broom.html) and [modelsummary](https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html). Familiarize yourself with the basic purpose and usage of these packages,

`install.packages(c("peacesciencer", "broom", "modelsummary"))`
:::

## Overview

A very common use of tables in the social sciences is to present regression results. There are numerous packages available for presenting regression output. In this lesson, we are going to focus on one of them that I think is particularly good for both pdf and html output: `modelsummary`. `modelsummary` also includes a function (`modelplot()`) for plotting point estimates and confidence intervals. So part of the objective of this lesson is going to be to learn when you should use a table to present your regression results versus when you should use a plot. 

We will be taking our example from the peace studies literature. We are going to download data using the `peacesciencer` package and use it to partially reproduce a famous analysis of conflict onset by [Fearon and Laitin](https://www-jstor-org.proxygw.wrlc.org/stable/3118222). 


## Run a regression model and display results with broom

{{< video https://youtu.be/upn8dlhvbns title = 'Make regression tables with broom'>}}

We will start off by building a data frame for our analysis with the `peacesciencer` package. `peacesciencer` is designed to make standard analysis for conflict studies more convenient and includes many of the control variables that you would use to estimate the likelihood of conflict onset or duration.  

To start, we call `create_stateyears()` to create a time-series data set for all available countries. We will specify `system = 'gw'` to denote the Gleditsch-Ward country coding system. Then we will filter for roughly the same years of Fearon and Laitin's original analysis (1945-99) with the caveat that `peacesciencer` only has conflict data starting in 1946.

Then we add a bunch of data to the data frame using the various `add_X` functions available in the package. Here we add UCDP conflict data which includes our dependent variable for this analysis--conflict onset. Then we add measures of democracy, ethno-religious fractionalization, GDP and terrain. 

```{r}
library(peacesciencer)
library(dplyr)

conflict_df <- create_stateyears(system = 'gw') |>
  filter(year %in% c(1946:1999)) |>
  add_ucdp_acd(type=c("intrastate"), only_wars = FALSE) |>
  add_democracy() |>
  add_creg_fractionalization() |>
  add_sdp_gdp() |>
  add_rugged_terrain()

glimpse(conflict_df)
```
Now let's go ahead and run the analysis. We will specify a logit model using the `glm()` function and specifying `family = binomial(link = "logit")`. We will store our model in an object called `conflict_model`. And from there we can use the `tidy()` function from the `broom` package to view the results.  

Before doing this, though, try calling `summary()` from base R on the model. This provides us with a basic regression table and it is great insofar as we don't want to do anything else with these estimates. Next, go ahead and call `View()` on the model object of just click on it to see what it looks like. You will notice that the results are stored in a complicated list format.

The `tidy()` function enables us to take the results from this list and store them in a "tibble", which is the Tidyverse equivalent of a data frame. Once the results are stored like this, we can easily access the estimates for anything that we might want to do with them including combining the results of different models or displaying particular estimates in our document using all of the tools that we have learned in this course. We can also set `conf.int = TRUE)` as an argument in `tidy()` to create and store confidence intervals.  

By default, `tidy()` returns p-values with large numbers of digits following the decimal point, making hard to tell whether the variables are significant. To fix this, we can pipe our `tidy()` output into a `mutate_if()` call and specify that we want numeric output to round to five decimal places. 

```{r}
library(broom)

conflict_model <- glm(ucdponset ~ ethfrac + relfrac + v2x_polyarchy + 
                        rugged + wbgdppc2011est + wbpopest,
                  data= conflict_df,
                  family = binomial(link="logit"))

# summary(conflict_model)

tidy_model <- conflict_model |>
  tidy(conf.int = TRUE) |>
  mutate_if(is.numeric, round, 5)

tidy_model
```

How did we do relative to Fearon and Latin's original analysis. Well, one thing that F&L were pretty certain about is that ethnic and religious fractionalization *do not* matter for conflict onset. But here we find a statistically significant relationship between these variables and conflict onset. But one thing we do find in common with their analysis is the importance of wealth and population. Both of these variables are significant in the expected direction. Wealthier countries experience less risk of conflict onset while more populous ones have a higher risk. 


## Run many regressions and display with modelsummary

{{< video https://youtu.be/My6_X6x5TZw title = 'Display multiple models with modelsummary'>}}

`broom` is really great if we want to just run one regression and see the results in the context of a working document. But what if we want to display our results to other researchers? For this, we need to use a different package. One package that is really good at producing professional-looking tabels is `modelsummary` and one of its strongest features is the ability to combine multiple models into the same table while still allowing for substantial customization. 

Let's go ahead and store four models. In the first three, we will feature sets of predictors (ethnicity, democracy and terrain) and then a final model that includes all of our predictors. In each model, we will include wealth (GDP) and population as controls because we have a feeling that these are robust predictors of conflict onset.




```{r}
#| label: models
ethnicity <- glm(ucdponset ~ ethfrac + relfrac + wbgdppc2011est + wbpopest, # store each model in an object
                  data = conflict_df,
                  family = binomial(link="logit"))

democracy <- glm(ucdponset ~ v2x_polyarchy + wbgdppc2011est +  wbpopest,
                  data = conflict_df,
                  family = binomial(link="logit"))

terrain <- glm(ucdponset ~ rugged + wbgdppc2011est + wbpopest ,
                  data = conflict_df,
                  family = binomial(link="logit"))

full_model <- glm(ucdponset ~ ethfrac + relfrac + v2x_polyarchy + rugged +
                        wbgdppc2011est + wbpopest,
                  data = conflict_df,
                  family = binomial(link="logit"))
```

Next we will store our models as a list with intuitive names that we can display as column headers in our regression table. Then we will store a new coefficient mapping where we rename our variables and change the order that they will appear in the table. We will also store a title and a reference. 

```{r}
#| label: store_parameters
models <- list("Ethnicity" = ethnicity,  # store list of models in an object
               "Democracy" = democracy, 
               "Terrain" = terrain, 
               "Full Model" = full_model)

coef_map <- c("ethfrac" = "Ethnic Frac",  # map coefficients
        "relfrac" = "Religions Frac",     #(change names and order)
        "v2x_polyarchy" = "Polyarchy",
        "rugged" = "Terrain",
        "wbgdppc2011est" = "Per capita GDP",
        "wbpopest" = "Population",
        "(Intercept)" = "Intercept")

caption = "Table 1: Predictors of Conflict Onset" # store caption
reference = "See appendix for data sources."      # store reference notes
```


Now we can call `modelsummary()`. The first argument is the list of models we want to display. Next we tell `modelsummary` that we want it to show stars for statistical significance (`stars = TRUE`). And in `gof_map`, we say that, of the many goodness of fit statistics available to us, we only want to include the number of observations. Finally we plug our title into `title = ` and a source note into `notes = `. 

```{r}
#| label: run_the_model
library(modelsummary)

modelsummary(models,                      # display the table
             stars = TRUE,                # include stars for significance
             gof_map = c("nobs"),         # goodness of fit stats to include   
             coef_map = coef_map,         # coefficient mapping
             title = caption,             # title
             notes = reference)           # source note
```


## When a coefficient plot is better

{{< video https://youtu.be/gif_wkqyub8 title = 'Display regression results with a plot'>}}

A regression table is great when we have many models that we want to display. But what happens when we have just one model? We could present something like our earlier `tidy()` output which has the beta coefficient, the standard error, t-statistic and p-values in separate columns, but this would be unconventional and would take up a lot of space. Another option is just to present a table with one column like this:  

```{r}
modelsummary(conflict_model, 
             stars = TRUE,  
             gof_map = c("nobs"),
             coef_map = coef_map,
             title = caption, 
             notes = reference)

```

But this is also somewhat unconventional and makes our regression output look a little bit lonely. A better option could be to display a coefficient plot that shows point estimates and confidence intervals. This is often preferable with one model because it makes our results so much easier to interpret. 

Let's try making a coefficient plot with `modelplot()` from the `modelsummary` package. The syntax for `modelplot()` is very similar to that of `modelsummary()` but there are a few small differences. 

First, it puts maps the coefficients from the bottom up, so if you to maintain the order of the coefficients you need to reverse the mapping. We do this with the `rev()` function. 

Second, we want to omit the intercept with `coef_omit = "Intercept"` because the emphasis in a coefficient plot is less on the exact regression equation and more on the magnitude and significance of the coefficients. 

Third we can customize various things. We can specify the color of the points and confidence intervals and we can load `ggplot2` for further customization. Now we can add geoms and labels just like any other ggplot object. Here we add a red vertical intercept line at zero to make it clearer which variables are significant (e.g. the confidence interval does not overlap with zero). And we add a title and a caption using the `labs()` function. 

```{r}
library(ggplot2)


modelplot(conflict_model, 
          coef_map = rev(coef_map), # rev() reverses list order
          coef_omit = "Intercept", 
          color = "blue") + # use plus to add customizations like any ggplot object
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = .75) + # red 0 line
  labs(
    title = "Figure 1: Predictors of Conflict Onset",
    caption = "See appendix for data sources."
  ) 
```
